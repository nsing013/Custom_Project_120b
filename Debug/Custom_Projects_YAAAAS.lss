
Custom_Projects_YAAAAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000049c  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800112  00800112  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d5  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a13  00000000  00000000  00001a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093f  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a9  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000768  00000000  00000000  00003769  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003ed1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	85 c0       	rjmp	.+266    	; 0x140 <__vector_13>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e8 00       	.word	0x00e8	; ????
  8e:	12 01       	movw	r2, r4
  90:	4b 01       	movw	r8, r22
  92:	5e 01       	movw	r10, r28
  94:	71 01       	movw	r14, r2
  96:	80 01       	movw	r16, r0
  98:	8f 01       	movw	r16, r30

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	ec e9       	ldi	r30, 0x9C	; 156
  ae:	f4 e0       	ldi	r31, 0x04	; 4
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	0b bf       	out	0x3b, r16	; 59
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
  b6:	07 90       	elpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	a2 31       	cpi	r26, 0x12	; 18
  bc:	b1 07       	cpc	r27, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a2 e1       	ldi	r26, 0x12	; 18
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ab 32       	cpi	r26, 0x2B	; 43
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	ba d1       	rcall	.+884    	; 0x446 <main>
  d2:	e2 c1       	rjmp	.+964    	; 0x498 <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <TimerSet>:
		default:
			break;
	}
	
	//PORTC = output;
  d6:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <_avr_timer_M>
  da:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <_avr_timer_M+0x1>
  de:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_M+0x2>
  e2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_M+0x3>
  e6:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <_avr_timer_cntcurr>
  ea:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <_avr_timer_cntcurr+0x1>
  ee:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_avr_timer_cntcurr+0x2>
  f2:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_avr_timer_cntcurr+0x3>
  f6:	08 95       	ret

000000f8 <TimerOn>:
  f8:	8b e0       	ldi	r24, 0x0B	; 11
  fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  fe:	8d e7       	ldi	r24, 0x7D	; 125
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 106:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 110:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 114:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 118:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_avr_timer_M>
 11c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_avr_timer_M+0x1>
 120:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_avr_timer_M+0x2>
 124:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <_avr_timer_M+0x3>
 128:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 12c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 130:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 134:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 138:	8f b7       	in	r24, 0x3f	; 63
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	8f bf       	out	0x3f, r24	; 63
 13e:	08 95       	ret

00000140 <__vector_13>:
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_cntcurr>
 156:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x1>
 15a:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_cntcurr+0x2>
 15e:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_cntcurr+0x3>
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	a1 09       	sbc	r26, r1
 166:	b1 09       	sbc	r27, r1
 168:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 16c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 170:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 174:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 178:	89 2b       	or	r24, r25
 17a:	8a 2b       	or	r24, r26
 17c:	8b 2b       	or	r24, r27
 17e:	99 f4       	brne	.+38     	; 0x1a6 <__vector_13+0x66>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <TimerFlag>
 186:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_avr_timer_M>
 18a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_avr_timer_M+0x1>
 18e:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_avr_timer_M+0x2>
 192:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <_avr_timer_M+0x3>
 196:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 19a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 19e:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 1a2:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <LED_Matrix_Tick>:
int i = 0;

enum LED_Matrix_States {LED_Matrix_Start, LED_Matrix_levels, LED_Matrix_cursor, LED_Matrix_move_right, LED_Matrix_move_left, LED_Matrix_move_up, LED_Matrix_move_down, LED_Matrix_update_user_matrix};
int LED_Matrix_Tick(int state)
{
	switch (state)							//Transitions
 1b8:	88 30       	cpi	r24, 0x08	; 8
 1ba:	91 05       	cpc	r25, r1
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <LED_Matrix_Tick+0x18>
		default:
			state = LED_Matrix_levels;
			break;
	}
	
	switch (state)							//Actions
 1be:	fc 01       	movw	r30, r24
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	e7 30       	cpi	r30, 0x07	; 7
 1c4:	f1 05       	cpc	r31, r1
 1c6:	08 f0       	brcs	.+2      	; 0x1ca <LED_Matrix_Tick+0x12>
 1c8:	c1 c0       	rjmp	.+386    	; 0x34c <LED_Matrix_Tick+0x194>
 1ca:	ea 5b       	subi	r30, 0xBA	; 186
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	5b c1       	rjmp	.+694    	; 0x486 <__tablejump2__>
	{
		case LED_Matrix_Start:
			break;
			
		case LED_Matrix_levels:				//don't screw with this
			PORTC = 0xFF;					//resets PORTC every time so last row does not mess with output for new row
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	88 b9       	out	0x08, r24	; 8
			PORTD = 0x01 << i;				//increments to next row, shifting will send power to the next row with every loop
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <LED_Matrix_Tick+0x2a>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <LED_Matrix_Tick+0x26>
 1e6:	8b b9       	out	0x0b, r24	; 11
			PORTC = y5[i];					//lights up the pattern for the given row
 1e8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 1ec:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
 1f0:	ea 5f       	subi	r30, 0xFA	; 250
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	80 81       	ld	r24, Z
 1f6:	88 b9       	out	0x08, r24	; 8
			i++;
 1f8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1fc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
			if(i==8) {i = 0;}				//if at the end of row, restart at the start of next row
 202:	88 30       	cpi	r24, 0x08	; 8
 204:	91 05       	cpc	r25, r1
 206:	39 f0       	breq	.+14     	; 0x216 <LED_Matrix_Tick+0x5e>
			
		case LED_Matrix_levels:				//don't screw with this
			PORTC = 0xFF;					//resets PORTC every time so last row does not mess with output for new row
			PORTD = 0x01 << i;				//increments to next row, shifting will send power to the next row with every loop
			PORTC = y5[i];					//lights up the pattern for the given row
			i++;
 208:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 20c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	08 95       	ret
			if(i==8) {i = 0;}				//if at the end of row, restart at the start of next row
 216:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 21a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret
			break;
			
		case LED_Matrix_cursor:
			PORTC = 0xFF;								//Reset PortC every time so last row does not mess with output for new row
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	28 b9       	out	0x08, r18	; 8
			PORTD = (0x01 << i);	
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 230:	02 c0       	rjmp	.+4      	; 0x236 <LED_Matrix_Tick+0x7e>
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <LED_Matrix_Tick+0x7a>
 23a:	2b b9       	out	0x0b, r18	; 11
			if(i == row){								//if the cursor is in the current row
 23c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <row>
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end>
 246:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x1>
 24a:	24 17       	cp	r18, r20
 24c:	35 07       	cpc	r19, r21
 24e:	51 f4       	brne	.+20     	; 0x264 <LED_Matrix_Tick+0xac>
				PORTC = ~(user_input [i] | cursor_x);	//want to show the cursor with the user input, negated because we want to make a circuit
 250:	f9 01       	movw	r30, r18
 252:	eb 5e       	subi	r30, 0xEB	; 235
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	30 81       	ld	r19, Z
 258:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <cursor_x>
 25c:	23 2b       	or	r18, r19
 25e:	20 95       	com	r18
 260:	28 b9       	out	0x08, r18	; 8
 262:	06 c0       	rjmp	.+12     	; 0x270 <LED_Matrix_Tick+0xb8>
			}
			else{
				PORTC = ~(user_input [i]);				//or else just show the pattern for that row
 264:	fa 01       	movw	r30, r20
 266:	eb 5e       	subi	r30, 0xEB	; 235
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	20 81       	ld	r18, Z
 26c:	20 95       	com	r18
 26e:	28 b9       	out	0x08, r18	; 8
			}	
			i++;
 270:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
 274:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
 278:	2f 5f       	subi	r18, 0xFF	; 255
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
			if(i==8) {i = 0;}
 27c:	28 30       	cpi	r18, 0x08	; 8
 27e:	31 05       	cpc	r19, r1
 280:	29 f0       	breq	.+10     	; 0x28c <LED_Matrix_Tick+0xd4>
				PORTC = ~(user_input [i] | cursor_x);	//want to show the cursor with the user input, negated because we want to make a circuit
			}
			else{
				PORTC = ~(user_input [i]);				//or else just show the pattern for that row
			}	
			i++;
 282:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <__data_end+0x1>
 286:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__data_end>
 28a:	08 95       	ret
			if(i==8) {i = 0;}
 28c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 290:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 294:	08 95       	ret
			break;
			
		case LED_Matrix_move_right:		
			if(col == 7)					//if at the right boundary
 296:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <col>
 29a:	27 30       	cpi	r18, 0x07	; 7
 29c:	09 f4       	brne	.+2      	; 0x2a0 <LED_Matrix_Tick+0xe8>
 29e:	56 c0       	rjmp	.+172    	; 0x34c <LED_Matrix_Tick+0x194>
				break;						//do nothing
			col++;							
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <col>
			cursor_x = (0x80 >> col);		//Shift the led at the very left by col (which is incremented every time LED_Matrix_move_right is called) So it will start from the 8th bit every time and shift backward.
 2a6:	40 e8       	ldi	r20, 0x80	; 128
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	ba 01       	movw	r22, r20
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <LED_Matrix_Tick+0xfa>
 2ae:	75 95       	asr	r23
 2b0:	67 95       	ror	r22
 2b2:	2a 95       	dec	r18
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <LED_Matrix_Tick+0xf6>
 2b6:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <cursor_x>
			break;
 2ba:	08 95       	ret
			
		case LED_Matrix_move_left:
			if(col == 0)					//if at the right boundary
 2bc:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <col>
 2c0:	22 23       	and	r18, r18
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <LED_Matrix_Tick+0x10e>
 2c4:	43 c0       	rjmp	.+134    	; 0x34c <LED_Matrix_Tick+0x194>
				break;						//do nothing
			col--;
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <col>
			cursor_x = (0x80 >> col);		//still shifting right, but col is decremented every time LED_Matrix_move_left is called so we are shifting by less
 2cc:	40 e8       	ldi	r20, 0x80	; 128
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	ba 01       	movw	r22, r20
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <LED_Matrix_Tick+0x120>
 2d4:	75 95       	asr	r23
 2d6:	67 95       	ror	r22
 2d8:	2a 95       	dec	r18
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <LED_Matrix_Tick+0x11c>
 2dc:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <cursor_x>
			break;
 2e0:	08 95       	ret
			
		case LED_Matrix_move_up:
			if(row == 0)					//if at the top boundary
 2e2:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <row>
 2e6:	22 23       	and	r18, r18
 2e8:	89 f1       	breq	.+98     	; 0x34c <LED_Matrix_Tick+0x194>
				break;						//do nothing
			row--;
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <row>
			cursor_y = (0x01 << row);		//similar to x axis, shifting left because the 8 bits represent the row #, shifting left means moving down the rows
 2f0:	31 e0       	ldi	r19, 0x01	; 1
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <LED_Matrix_Tick+0x13e>
 2f4:	33 0f       	add	r19, r19
 2f6:	2a 95       	dec	r18
 2f8:	ea f7       	brpl	.-6      	; 0x2f4 <LED_Matrix_Tick+0x13c>
 2fa:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <cursor_y>
			break;
 2fe:	08 95       	ret
			
		case LED_Matrix_move_down:
			if(row == 7)
 300:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <row>
 304:	27 30       	cpi	r18, 0x07	; 7
 306:	11 f1       	breq	.+68     	; 0x34c <LED_Matrix_Tick+0x194>
				break;
			row++;
 308:	2f 5f       	subi	r18, 0xFF	; 255
 30a:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <row>
			cursor_y = (0x01 << row);
 30e:	31 e0       	ldi	r19, 0x01	; 1
 310:	01 c0       	rjmp	.+2      	; 0x314 <LED_Matrix_Tick+0x15c>
 312:	33 0f       	add	r19, r19
 314:	2a 95       	dec	r18
 316:	ea f7       	brpl	.-6      	; 0x312 <LED_Matrix_Tick+0x15a>
 318:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <cursor_y>
			break;
 31c:	08 95       	ret
			
		case LED_Matrix_update_user_matrix:	
			user_input[row] |= cursor_x;	//updates user_input array with the current cursor value
 31e:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <row>
 322:	e4 2f       	mov	r30, r20
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	eb 5e       	subi	r30, 0xEB	; 235
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	30 81       	ld	r19, Z
 32c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <cursor_x>
 330:	23 2b       	or	r18, r19
 332:	20 83       	st	Z, r18
			user_row_val |= 0x01 << row;	//giving power to all the rows
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <LED_Matrix_Tick+0x186>
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	4a 95       	dec	r20
 340:	e2 f7       	brpl	.-8      	; 0x33a <LED_Matrix_Tick+0x182>
 342:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <user_row_val>
 346:	23 2b       	or	r18, r19
 348:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <user_row_val>
			
		default:
			break;
	}
	return state;
};
 34c:	08 95       	ret

0000034e <ADC_init>:

// Using ADC to get the x and y axis of the JOYSTICK
void ADC_init() 
{
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 34e:	ea e7       	ldi	r30, 0x7A	; 122
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	80 6e       	ori	r24, 0xE0	; 224
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <Read_ADC>:
	// ADATE: setting this bit enables auto-triggering. Since we are in Free Running Mode, a new conversion will trigger whenever the previous conversion completes.
}

unsigned short Read_ADC(uint8_t ch)
{
	ADMUX = (1<<REFS0);
 35a:	ac e7       	ldi	r26, 0x7C	; 124
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	90 e4       	ldi	r25, 0x40	; 64
 360:	9c 93       	st	X, r25
	ADCSRA |= (1 << ADEN) | (1 << ADPS2);
 362:	ea e7       	ldi	r30, 0x7A	; 122
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	90 81       	ld	r25, Z
 368:	94 68       	ori	r25, 0x84	; 132
 36a:	90 83       	st	Z, r25
	ch = ch&0x07;
	ADMUX |= ch; //alternates between A0 and A1 which are the horizontal and vertical values on the joystick
 36c:	9c 91       	ld	r25, X
 36e:	87 70       	andi	r24, 0x07	; 7
 370:	98 2b       	or	r25, r24
 372:	9c 93       	st	X, r25
	ADCSRA |= (1<<ADSC);
 374:	80 81       	ld	r24, Z
 376:	80 64       	ori	r24, 0x40	; 64
 378:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
 37a:	80 81       	ld	r24, Z
 37c:	84 ff       	sbrs	r24, 4
 37e:	fd cf       	rjmp	.-6      	; 0x37a <Read_ADC+0x20>
	ADCSRA |= (1<<ADIF);
 380:	ea e7       	ldi	r30, 0x7A	; 122
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 61       	ori	r24, 0x10	; 16
 388:	80 83       	st	Z, r24
	return ADC;
 38a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 38e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 392:	08 95       	ret

00000394 <Joystick_tick>:
unsigned short high_threshold = 580;	//820;

enum Joystick_States {Joystick_navigate};

void Joystick_tick(int state) 
{
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	8c 01       	movw	r16, r24
	short button = ~PINB & 0x20;							//button press also part of the joystick
 39c:	c3 b1       	in	r28, 0x03	; 3
	valueX = Read_ADC(1);									//getting x and y axis from joystick
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	dc df       	rcall	.-72     	; 0x35a <Read_ADC>
 3a2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <valueX+0x1>
 3a6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <valueX>
	valueY = Read_ADC(0);
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	d6 df       	rcall	.-84     	; 0x35a <Read_ADC>
 3ae:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <valueY+0x1>
 3b2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <valueY>
	
	switch(state) //start transitions
 3b6:	01 2b       	or	r16, r17
 3b8:	09 f0       	breq	.+2      	; 0x3bc <Joystick_tick+0x28>
 3ba:	41 c0       	rjmp	.+130    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
		case Joystick_navigate:
			if(valueX < low_threshold)	{					//joystick is in the left position
 3bc:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <valueX>
 3c0:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <valueX+0x1>
 3c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <low_threshold>
 3c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <low_threshold+0x1>
 3cc:	28 17       	cp	r18, r24
 3ce:	39 07       	cpc	r19, r25
 3d0:	18 f4       	brcc	.+6      	; 0x3d8 <Joystick_tick+0x44>
				LED_Matrix_Tick(LED_Matrix_move_left);		//decrement x value on cursor
 3d2:	84 e0       	ldi	r24, 0x04	; 4
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	f0 de       	rcall	.-544    	; 0x1b8 <LED_Matrix_Tick>
			}
			if(valueX > high_threshold)	{					//joystick is in the right position
 3d8:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <valueX>
 3dc:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <valueX+0x1>
 3e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3e8:	82 17       	cp	r24, r18
 3ea:	93 07       	cpc	r25, r19
				LED_Matrix_Tick(LED_Matrix_move_right);		//increment x value on cursor
 3ec:	18 f4       	brcc	.+6      	; 0x3f4 <Joystick_tick+0x60>
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	e2 de       	rcall	.-572    	; 0x1b8 <LED_Matrix_Tick>
			}
			if(valueY < low_threshold)	{					//joystick is in the left position
 3f4:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <valueY>
 3f8:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <valueY+0x1>
 3fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <low_threshold>
 400:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <low_threshold+0x1>
 404:	28 17       	cp	r18, r24
 406:	39 07       	cpc	r19, r25
				LED_Matrix_Tick(LED_Matrix_move_up);		//increment x value on cursor, my joystick is sideways on the board so it has to be done this way
 408:	18 f4       	brcc	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	d4 de       	rcall	.-600    	; 0x1b8 <LED_Matrix_Tick>
			}
			if(valueY > high_threshold)	{					//joystick is in the right position
 410:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <valueY>
 414:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <valueY+0x1>
 418:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 41c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 420:	82 17       	cp	r24, r18
 422:	93 07       	cpc	r25, r19
				LED_Matrix_Tick(LED_Matrix_move_down);		//decrement x value on cursor
 424:	18 f4       	brcc	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	c6 de       	rcall	.-628    	; 0x1b8 <LED_Matrix_Tick>
			}
			
			if(button)										// USE A BUTTON INSTEAD THERE IS NO BUTTON ON JOYSTICK DUMBB!
 42c:	8c 2f       	mov	r24, r28
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	80 95       	com	r24
 432:	90 95       	com	r25
 434:	85 ff       	sbrs	r24, 5
				nokia_lcd_power(1);
				nokia_lcd_set_cursor(0, 0);
				nokia_lcd_write_string("Button is pressed!", 1);
				nokia_lcd_render();
				*/
				LED_Matrix_Tick(LED_Matrix_update_user_matrix); //update the user-input matrix 
 436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 438:	87 e0       	ldi	r24, 0x07	; 7
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	bd de       	rcall	.-646    	; 0x1b8 <LED_Matrix_Tick>
			break;
		default:
			break;
	}
	return state;
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	08 95       	ret

00000446 <main>:
{

	//PA[0] connected to potentiometer giving input //LEFT and RIGHT for joystick right now
	//PA[1] want to connect to  y axis
	
	DDRA = 0x00; PORTA = 0xFF; //input from joystick
 446:	11 b8       	out	0x01, r1	; 1
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x1F; PORTB = 0xE0; //output to the LCD //one input from button
 44c:	9f e1       	ldi	r25, 0x1F	; 31
 44e:	94 b9       	out	0x04, r25	; 4
 450:	90 ee       	ldi	r25, 0xE0	; 224
 452:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0x00; //Pattern on each row of LED Matrix
 454:	87 b9       	out	0x07, r24	; 7
 456:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Row # 
 458:	8a b9       	out	0x0a, r24	; 10
 45a:	1b b8       	out	0x0b, r1	; 11

	ADC_init();
 45c:	78 df       	rcall	.-272    	; 0x34e <ADC_init>
	char snum[10]; //Char array holds ADC Value to display on LCD
	
	TimerSet(10); //30);
 45e:	6a e0       	ldi	r22, 0x0A	; 10
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 466:	37 de       	rcall	.-914    	; 0xd6 <TimerSet>
 468:	47 de       	rcall	.-882    	; 0xf8 <TimerOn>
	{
		//LED_Matrix_Tick(LED_Matrix_levels);
		
		//nokia_LCD_tick();	
		while(!TimerFlag)
			LED_Matrix_Tick(LED_Matrix_cursor);				//LED MATRIX STATE MACHINE
 46a:	03 c0       	rjmp	.+6      	; 0x472 <main+0x2c>
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	a3 de       	rcall	.-698    	; 0x1b8 <LED_Matrix_Tick>
	while(1)
	{
		//LED_Matrix_Tick(LED_Matrix_levels);
		
		//nokia_LCD_tick();	
		while(!TimerFlag)
 472:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 476:	88 23       	and	r24, r24
			LED_Matrix_Tick(LED_Matrix_cursor);				//LED MATRIX STATE MACHINE
			
		Joystick_tick(Joystick_navigate);
 478:	c9 f3       	breq	.-14     	; 0x46c <main+0x26>
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	8a df       	rcall	.-236    	; 0x394 <Joystick_tick>
		TimerFlag = 0;	
 480:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
	}
 484:	f6 cf       	rjmp	.-20     	; 0x472 <main+0x2c>

00000486 <__tablejump2__>:
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	00 24       	eor	r0, r0
 48c:	00 1c       	adc	r0, r0
 48e:	0b be       	out	0x3b, r0	; 59
 490:	07 90       	elpm	r0, Z+
 492:	f6 91       	elpm	r31, Z
 494:	e0 2d       	mov	r30, r0
 496:	09 94       	ijmp

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
