
Custom_Projects_YAAAAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000d70  00000e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021c  0080017a  0080017a  00000e7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001670  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8d  00000000  00000000  00003076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00003b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000826  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000964  00000000  00000000  000045be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004f22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3c c1       	rjmp	.+632    	; 0x27a <__ctors_end>
   2:	00 00       	nop
   4:	57 c1       	rjmp	.+686    	; 0x2b4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c1       	rjmp	.+682    	; 0x2b4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c1       	rjmp	.+678    	; 0x2b4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c1       	rjmp	.+674    	; 0x2b4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c1       	rjmp	.+670    	; 0x2b4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c1       	rjmp	.+666    	; 0x2b4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c1       	rjmp	.+662    	; 0x2b4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c1       	rjmp	.+658    	; 0x2b4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c1       	rjmp	.+654    	; 0x2b4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c1       	rjmp	.+650    	; 0x2b4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c1       	rjmp	.+646    	; 0x2b4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c1       	rjmp	.+642    	; 0x2b4 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c1       	rjmp	.+812    	; 0x362 <__vector_13>
  36:	00 00       	nop
  38:	3d c1       	rjmp	.+634    	; 0x2b4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c1       	rjmp	.+630    	; 0x2b4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c1       	rjmp	.+626    	; 0x2b4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c1       	rjmp	.+622    	; 0x2b4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c1       	rjmp	.+618    	; 0x2b4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c1       	rjmp	.+614    	; 0x2b4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c1       	rjmp	.+610    	; 0x2b4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c1       	rjmp	.+606    	; 0x2b4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c1       	rjmp	.+602    	; 0x2b4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c1       	rjmp	.+598    	; 0x2b4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c1       	rjmp	.+594    	; 0x2b4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c1       	rjmp	.+590    	; 0x2b4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c1       	rjmp	.+586    	; 0x2b4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c1       	rjmp	.+582    	; 0x2b4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c1       	rjmp	.+578    	; 0x2b4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c1       	rjmp	.+574    	; 0x2b4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c1       	rjmp	.+570    	; 0x2b4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c1       	rjmp	.+566    	; 0x2b4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c1       	rjmp	.+562    	; 0x2b4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c1       	rjmp	.+558    	; 0x2b4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c1       	rjmp	.+554    	; 0x2b4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f9 01       	movw	r30, r18
  8e:	24 02       	muls	r18, r20
  90:	51 02       	muls	r21, r17
  92:	64 02       	muls	r22, r20
  94:	77 02       	muls	r23, r23
  96:	86 02       	muls	r24, r22
  98:	95 02       	muls	r25, r21

0000009a <CHARSET>:
  9a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  aa:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  ba:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  ca:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  da:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  ea:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  fa:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
 10a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 11a:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 12a:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 13a:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 14a:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 15a:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 16a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 17a:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 18a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 19a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 1aa:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1ba:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1ca:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1da:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1ea:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1fa:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 20a:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 21a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 22a:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 23a:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 24a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 25a:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 26a:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000027a <__ctors_end>:
 27a:	11 24       	eor	r1, r1
 27c:	1f be       	out	0x3f, r1	; 63
 27e:	cf ef       	ldi	r28, 0xFF	; 255
 280:	d0 e4       	ldi	r29, 0x40	; 64
 282:	de bf       	out	0x3e, r29	; 62
 284:	cd bf       	out	0x3d, r28	; 61

00000286 <__do_copy_data>:
 286:	11 e0       	ldi	r17, 0x01	; 1
 288:	a0 e0       	ldi	r26, 0x00	; 0
 28a:	b1 e0       	ldi	r27, 0x01	; 1
 28c:	e0 e7       	ldi	r30, 0x70	; 112
 28e:	fd e0       	ldi	r31, 0x0D	; 13
 290:	00 e0       	ldi	r16, 0x00	; 0
 292:	0b bf       	out	0x3b, r16	; 59
 294:	02 c0       	rjmp	.+4      	; 0x29a <__do_copy_data+0x14>
 296:	07 90       	elpm	r0, Z+
 298:	0d 92       	st	X+, r0
 29a:	aa 37       	cpi	r26, 0x7A	; 122
 29c:	b1 07       	cpc	r27, r17
 29e:	d9 f7       	brne	.-10     	; 0x296 <__do_copy_data+0x10>

000002a0 <__do_clear_bss>:
 2a0:	23 e0       	ldi	r18, 0x03	; 3
 2a2:	aa e7       	ldi	r26, 0x7A	; 122
 2a4:	b1 e0       	ldi	r27, 0x01	; 1
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <.do_clear_bss_start>

000002a8 <.do_clear_bss_loop>:
 2a8:	1d 92       	st	X+, r1

000002aa <.do_clear_bss_start>:
 2aa:	a6 39       	cpi	r26, 0x96	; 150
 2ac:	b2 07       	cpc	r27, r18
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <.do_clear_bss_loop>
 2b0:	b3 d4       	rcall	.+2406   	; 0xc18 <main>
 2b2:	5c c5       	rjmp	.+2744   	; 0xd6c <_exit>

000002b4 <__bad_interrupt>:
 2b4:	a5 ce       	rjmp	.-694    	; 0x0 <__vectors>

000002b6 <write>:
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
	nokia_lcd.cursor_y = y;
 2b6:	28 98       	cbi	0x05, 0	; 5
 2b8:	66 23       	and	r22, r22
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <write+0xa>
 2bc:	2a 9a       	sbi	0x05, 2	; 5
 2be:	15 c0       	rjmp	.+42     	; 0x2ea <write+0x34>
 2c0:	2a 98       	cbi	0x05, 2	; 5
 2c2:	13 c0       	rjmp	.+38     	; 0x2ea <write+0x34>
 2c4:	ac 01       	movw	r20, r24
 2c6:	02 2e       	mov	r0, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <write+0x18>
 2ca:	55 95       	asr	r21
 2cc:	47 95       	ror	r20
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <write+0x14>
 2d2:	40 ff       	sbrs	r20, 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <write+0x24>
 2d6:	2b 9a       	sbi	0x05, 3	; 5
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <write+0x26>
 2da:	2b 98       	cbi	0x05, 3	; 5
 2dc:	2c 9a       	sbi	0x05, 4	; 5
 2de:	2c 98       	cbi	0x05, 4	; 5
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	31 09       	sbc	r19, r1
 2e4:	78 f7       	brcc	.-34     	; 0x2c4 <write+0xe>
 2e6:	28 9a       	sbi	0x05, 0	; 5
 2e8:	08 95       	ret
 2ea:	27 e0       	ldi	r18, 0x07	; 7
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	e9 cf       	rjmp	.-46     	; 0x2c4 <write+0xe>

000002f2 <write_cmd>:
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	e0 cf       	rjmp	.-64     	; 0x2b6 <write>
 2f6:	08 95       	ret

000002f8 <TimerSet>:
 2f8:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <_avr_timer_M>
 2fc:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <_avr_timer_M+0x1>
 300:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_avr_timer_M+0x2>
 304:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_avr_timer_M+0x3>
 308:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <_avr_timer_cntcurr>
 30c:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <_avr_timer_cntcurr+0x1>
 310:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <_avr_timer_cntcurr+0x2>
 314:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <_avr_timer_cntcurr+0x3>
 318:	08 95       	ret

0000031a <TimerOn>:
 31a:	8b e0       	ldi	r24, 0x0B	; 11
 31c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 320:	8d e7       	ldi	r24, 0x7D	; 125
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 328:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 332:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 336:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 33a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <_avr_timer_M>
 33e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <_avr_timer_M+0x1>
 342:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <_avr_timer_M+0x2>
 346:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <_avr_timer_M+0x3>
 34a:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <_avr_timer_cntcurr>
 34e:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <_avr_timer_cntcurr+0x1>
 352:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <_avr_timer_cntcurr+0x2>
 356:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <_avr_timer_cntcurr+0x3>
 35a:	8f b7       	in	r24, 0x3f	; 63
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	8f bf       	out	0x3f, r24	; 63
 360:	08 95       	ret

00000362 <__vector_13>:
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <_avr_timer_cntcurr>
 378:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <_avr_timer_cntcurr+0x1>
 37c:	a0 91 84 03 	lds	r26, 0x0384	; 0x800384 <_avr_timer_cntcurr+0x2>
 380:	b0 91 85 03 	lds	r27, 0x0385	; 0x800385 <_avr_timer_cntcurr+0x3>
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	a1 09       	sbc	r26, r1
 388:	b1 09       	sbc	r27, r1
 38a:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <_avr_timer_cntcurr>
 38e:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <_avr_timer_cntcurr+0x1>
 392:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <_avr_timer_cntcurr+0x2>
 396:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <_avr_timer_cntcurr+0x3>
 39a:	89 2b       	or	r24, r25
 39c:	8a 2b       	or	r24, r26
 39e:	8b 2b       	or	r24, r27
 3a0:	99 f4       	brne	.+38     	; 0x3c8 <__vector_13+0x66>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <TimerFlag>
 3a8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <_avr_timer_M>
 3ac:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <_avr_timer_M+0x1>
 3b0:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <_avr_timer_M+0x2>
 3b4:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <_avr_timer_M+0x3>
 3b8:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <_avr_timer_cntcurr>
 3bc:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <_avr_timer_cntcurr+0x1>
 3c0:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <_avr_timer_cntcurr+0x2>
 3c4:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <_avr_timer_cntcurr+0x3>
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <LED_Matrix_Tick>:
 3da:	88 30       	cpi	r24, 0x08	; 8
 3dc:	91 05       	cpc	r25, r1
 3de:	48 f4       	brcc	.+18     	; 0x3f2 <LED_Matrix_Tick+0x18>
 3e0:	fc 01       	movw	r30, r24
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	e7 30       	cpi	r30, 0x07	; 7
 3e6:	f1 05       	cpc	r31, r1
 3e8:	08 f0       	brcs	.+2      	; 0x3ec <LED_Matrix_Tick+0x12>
 3ea:	b6 c0       	rjmp	.+364    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 3ec:	ea 5b       	subi	r30, 0xBA	; 186
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	55 c4       	rjmp	.+2218   	; 0xc9c <__tablejump2__>
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	88 b9       	out	0x08, r24	; 8
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	00 90 78 03 	lds	r0, 0x0378	; 0x800378 <i>
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	8b b9       	out	0x0b, r24	; 11
 40a:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <level>
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	ec 5f       	subi	r30, 0xFC	; 252
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <i>
 41c:	01 90       	ld	r0, Z+
 41e:	f0 81       	ld	r31, Z
 420:	e0 2d       	mov	r30, r0
 422:	e8 0f       	add	r30, r24
 424:	f1 1d       	adc	r31, r1
 426:	80 81       	ld	r24, Z
 428:	88 b9       	out	0x08, r24	; 8
 42a:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <i>
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	88 30       	cpi	r24, 0x08	; 8
 432:	29 f0       	breq	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 434:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <i>
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	08 95       	ret
 43e:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <i>
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	08 95       	ret
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	28 b9       	out	0x08, r18	; 8
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	00 90 78 03 	lds	r0, 0x0378	; 0x800378 <i>
 454:	02 c0       	rjmp	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45e:	2b b9       	out	0x0b, r18	; 11
 460:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <i>
 464:	20 91 95 03 	lds	r18, 0x0395	; 0x800395 <row>
 468:	e2 13       	cpse	r30, r18
 46a:	0a c0       	rjmp	.+20     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	e6 58       	subi	r30, 0x86	; 134
 470:	fc 4f       	sbci	r31, 0xFC	; 252
 472:	30 81       	ld	r19, Z
 474:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <cursor_x>
 478:	23 2b       	or	r18, r19
 47a:	20 95       	com	r18
 47c:	28 b9       	out	0x08, r18	; 8
 47e:	06 c0       	rjmp	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	e6 58       	subi	r30, 0x86	; 134
 484:	fc 4f       	sbci	r31, 0xFC	; 252
 486:	20 81       	ld	r18, Z
 488:	20 95       	com	r18
 48a:	28 b9       	out	0x08, r18	; 8
 48c:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <i>
 490:	2f 5f       	subi	r18, 0xFF	; 255
 492:	28 30       	cpi	r18, 0x08	; 8
 494:	19 f0       	breq	.+6      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 496:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <i>
 49a:	08 95       	ret
 49c:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <i>
 4a0:	08 95       	ret
 4a2:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <col>
 4a6:	27 30       	cpi	r18, 0x07	; 7
 4a8:	09 f4       	brne	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4aa:	56 c0       	rjmp	.+172    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 4ac:	2f 5f       	subi	r18, 0xFF	; 255
 4ae:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <col>
 4b2:	40 e8       	ldi	r20, 0x80	; 128
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	ba 01       	movw	r22, r20
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ba:	75 95       	asr	r23
 4bc:	67 95       	ror	r22
 4be:	2a 95       	dec	r18
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4c2:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <cursor_x>
 4c6:	08 95       	ret
 4c8:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <col>
 4cc:	22 23       	and	r18, r18
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d0:	43 c0       	rjmp	.+134    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 4d2:	21 50       	subi	r18, 0x01	; 1
 4d4:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <col>
 4d8:	40 e8       	ldi	r20, 0x80	; 128
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	ba 01       	movw	r22, r20
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e0:	75 95       	asr	r23
 4e2:	67 95       	ror	r22
 4e4:	2a 95       	dec	r18
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4e8:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <cursor_x>
 4ec:	08 95       	ret
 4ee:	20 91 95 03 	lds	r18, 0x0395	; 0x800395 <row>
 4f2:	22 23       	and	r18, r18
 4f4:	89 f1       	breq	.+98     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	20 93 95 03 	sts	0x0395, r18	; 0x800395 <row>
 4fc:	31 e0       	ldi	r19, 0x01	; 1
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 500:	33 0f       	add	r19, r19
 502:	2a 95       	dec	r18
 504:	ea f7       	brpl	.-6      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 506:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <cursor_y>
 50a:	08 95       	ret
 50c:	20 91 95 03 	lds	r18, 0x0395	; 0x800395 <row>
 510:	27 30       	cpi	r18, 0x07	; 7
 512:	11 f1       	breq	.+68     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 514:	2f 5f       	subi	r18, 0xFF	; 255
 516:	20 93 95 03 	sts	0x0395, r18	; 0x800395 <row>
 51a:	31 e0       	ldi	r19, 0x01	; 1
 51c:	01 c0       	rjmp	.+2      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51e:	33 0f       	add	r19, r19
 520:	2a 95       	dec	r18
 522:	ea f7       	brpl	.-6      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 524:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <cursor_y>
 528:	08 95       	ret
 52a:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <row>
 52e:	e4 2f       	mov	r30, r20
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	e6 58       	subi	r30, 0x86	; 134
 534:	fc 4f       	sbci	r31, 0xFC	; 252
 536:	30 81       	ld	r19, Z
 538:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <cursor_x>
 53c:	23 2b       	or	r18, r19
 53e:	20 83       	st	Z, r18
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 546:	22 0f       	add	r18, r18
 548:	33 1f       	adc	r19, r19
 54a:	4a 95       	dec	r20
 54c:	e2 f7       	brpl	.-8      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54e:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <user_row_val>
 552:	23 2b       	or	r18, r19
 554:	20 93 79 03 	sts	0x0379, r18	; 0x800379 <user_row_val>
 558:	08 95       	ret

0000055a <ADC_init>:
 55a:	ea e7       	ldi	r30, 0x7A	; 122
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	80 6e       	ori	r24, 0xE0	; 224
 562:	80 83       	st	Z, r24
 564:	08 95       	ret

00000566 <Read_ADC>:
 566:	ac e7       	ldi	r26, 0x7C	; 124
 568:	b0 e0       	ldi	r27, 0x00	; 0
 56a:	90 e4       	ldi	r25, 0x40	; 64
 56c:	9c 93       	st	X, r25
 56e:	ea e7       	ldi	r30, 0x7A	; 122
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	90 81       	ld	r25, Z
 574:	94 68       	ori	r25, 0x84	; 132
 576:	90 83       	st	Z, r25
 578:	9c 91       	ld	r25, X
 57a:	87 70       	andi	r24, 0x07	; 7
 57c:	98 2b       	or	r25, r24
 57e:	9c 93       	st	X, r25
 580:	80 81       	ld	r24, Z
 582:	80 64       	ori	r24, 0x40	; 64
 584:	80 83       	st	Z, r24
 586:	80 81       	ld	r24, Z
 588:	84 ff       	sbrs	r24, 4
 58a:	fd cf       	rjmp	.-6      	; 0x586 <Read_ADC+0x20>
 58c:	ea e7       	ldi	r30, 0x7A	; 122
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	80 61       	ori	r24, 0x10	; 16
 594:	80 83       	st	Z, r24
 596:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 59a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 59e:	08 95       	ret

000005a0 <Joystick_tick>:
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	8c 01       	movw	r16, r24
 5a8:	c3 b1       	in	r28, 0x03	; 3
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	dc df       	rcall	.-72     	; 0x566 <Read_ADC>
 5ae:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <valueX+0x1>
 5b2:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <valueX>
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	d6 df       	rcall	.-84     	; 0x566 <Read_ADC>
 5ba:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <valueY+0x1>
 5be:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <valueY>
 5c2:	01 2b       	or	r16, r17
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <Joystick_tick+0x28>
 5c6:	41 c0       	rjmp	.+130    	; 0x64a <Joystick_tick+0xaa>
 5c8:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <valueX>
 5cc:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <valueX+0x1>
 5d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <low_threshold>
 5d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <low_threshold+0x1>
 5d8:	28 17       	cp	r18, r24
 5da:	39 07       	cpc	r19, r25
 5dc:	18 f4       	brcc	.+6      	; 0x5e4 <Joystick_tick+0x44>
 5de:	84 e0       	ldi	r24, 0x04	; 4
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	fb de       	rcall	.-522    	; 0x3da <LED_Matrix_Tick>
 5e4:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <valueX>
 5e8:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <valueX+0x1>
 5ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5f4:	82 17       	cp	r24, r18
 5f6:	93 07       	cpc	r25, r19
 5f8:	18 f4       	brcc	.+6      	; 0x600 <Joystick_tick+0x60>
 5fa:	83 e0       	ldi	r24, 0x03	; 3
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	ed de       	rcall	.-550    	; 0x3da <LED_Matrix_Tick>
 600:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <valueY>
 604:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <valueY+0x1>
 608:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <low_threshold>
 60c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <low_threshold+0x1>
 610:	28 17       	cp	r18, r24
 612:	39 07       	cpc	r19, r25
 614:	18 f4       	brcc	.+6      	; 0x61c <Joystick_tick+0x7c>
 616:	85 e0       	ldi	r24, 0x05	; 5
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	df de       	rcall	.-578    	; 0x3da <LED_Matrix_Tick>
 61c:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <valueY>
 620:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <valueY+0x1>
 624:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 628:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 62c:	82 17       	cp	r24, r18
 62e:	93 07       	cpc	r25, r19
 630:	18 f4       	brcc	.+6      	; 0x638 <Joystick_tick+0x98>
 632:	86 e0       	ldi	r24, 0x06	; 6
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	d1 de       	rcall	.-606    	; 0x3da <LED_Matrix_Tick>
 638:	8c 2f       	mov	r24, r28
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	80 95       	com	r24
 63e:	90 95       	com	r25
 640:	85 ff       	sbrs	r24, 5
 642:	03 c0       	rjmp	.+6      	; 0x64a <Joystick_tick+0xaa>
 644:	87 e0       	ldi	r24, 0x07	; 7
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	c8 de       	rcall	.-624    	; 0x3da <LED_Matrix_Tick>
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	08 95       	ret

00000652 <nokia_lcd_init>:
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	20 9a       	sbi	0x04, 0	; 4
 658:	21 9a       	sbi	0x04, 1	; 4
 65a:	22 9a       	sbi	0x04, 2	; 4
 65c:	23 9a       	sbi	0x04, 3	; 4
 65e:	24 9a       	sbi	0x04, 4	; 4
 660:	29 9a       	sbi	0x05, 1	; 5
 662:	28 9a       	sbi	0x05, 0	; 5
 664:	83 ec       	ldi	r24, 0xC3	; 195
 666:	99 e0       	ldi	r25, 0x09	; 9
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <nokia_lcd_init+0x16>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <nokia_lcd_init+0x1c>
 66e:	00 00       	nop
 670:	29 98       	cbi	0x05, 1	; 5
 672:	8b e5       	ldi	r24, 0x5B	; 91
 674:	94 e4       	ldi	r25, 0x44	; 68
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <nokia_lcd_init+0x24>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <nokia_lcd_init+0x2a>
 67c:	00 00       	nop
 67e:	29 9a       	sbi	0x05, 1	; 5
 680:	28 98       	cbi	0x05, 0	; 5
 682:	81 e2       	ldi	r24, 0x21	; 33
 684:	36 de       	rcall	.-916    	; 0x2f2 <write_cmd>
 686:	83 e1       	ldi	r24, 0x13	; 19
 688:	34 de       	rcall	.-920    	; 0x2f2 <write_cmd>
 68a:	86 e0       	ldi	r24, 0x06	; 6
 68c:	32 de       	rcall	.-924    	; 0x2f2 <write_cmd>
 68e:	82 ec       	ldi	r24, 0xC2	; 194
 690:	30 de       	rcall	.-928    	; 0x2f2 <write_cmd>
 692:	80 e2       	ldi	r24, 0x20	; 32
 694:	2e de       	rcall	.-932    	; 0x2f2 <write_cmd>
 696:	89 e0       	ldi	r24, 0x09	; 9
 698:	2c de       	rcall	.-936    	; 0x2f2 <write_cmd>
 69a:	80 e8       	ldi	r24, 0x80	; 128
 69c:	2a de       	rcall	.-940    	; 0x2f2 <write_cmd>
 69e:	80 e4       	ldi	r24, 0x40	; 64
 6a0:	28 de       	rcall	.-944    	; 0x2f2 <write_cmd>
 6a2:	c8 ef       	ldi	r28, 0xF8	; 248
 6a4:	d1 e0       	ldi	r29, 0x01	; 1
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	05 de       	rcall	.-1014   	; 0x2b6 <write>
 6ac:	21 97       	sbiw	r28, 0x01	; 1
 6ae:	d9 f7       	brne	.-10     	; 0x6a6 <nokia_lcd_init+0x54>
 6b0:	88 e0       	ldi	r24, 0x08	; 8
 6b2:	1f de       	rcall	.-962    	; 0x2f2 <write_cmd>
 6b4:	8c e0       	ldi	r24, 0x0C	; 12
 6b6:	1d de       	rcall	.-966    	; 0x2f2 <write_cmd>
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret

000006be <nokia_lcd_clear>:
 6be:	80 e8       	ldi	r24, 0x80	; 128
 6c0:	18 de       	rcall	.-976    	; 0x2f2 <write_cmd>
 6c2:	80 e4       	ldi	r24, 0x40	; 64
 6c4:	16 de       	rcall	.-980    	; 0x2f2 <write_cmd>
 6c6:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <nokia_lcd+0x1f8>
 6ca:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <nokia_lcd+0x1f9>
 6ce:	ee e7       	ldi	r30, 0x7E	; 126
 6d0:	f1 e0       	ldi	r31, 0x01	; 1
 6d2:	86 e7       	ldi	r24, 0x76	; 118
 6d4:	93 e0       	ldi	r25, 0x03	; 3
 6d6:	11 92       	st	Z+, r1
 6d8:	e8 17       	cp	r30, r24
 6da:	f9 07       	cpc	r31, r25
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <nokia_lcd_clear+0x18>
 6de:	08 95       	ret

000006e0 <nokia_lcd_set_pixel>:
 6e0:	26 2f       	mov	r18, r22
 6e2:	26 95       	lsr	r18
 6e4:	26 95       	lsr	r18
 6e6:	26 95       	lsr	r18
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	34 e5       	ldi	r19, 0x54	; 84
 6ec:	23 9f       	mul	r18, r19
 6ee:	80 0d       	add	r24, r0
 6f0:	91 1d       	adc	r25, r1
 6f2:	11 24       	eor	r1, r1
 6f4:	44 23       	and	r20, r20
 6f6:	79 f0       	breq	.+30     	; 0x716 <nokia_lcd_set_pixel+0x36>
 6f8:	fc 01       	movw	r30, r24
 6fa:	e2 58       	subi	r30, 0x82	; 130
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	67 70       	andi	r22, 0x07	; 7
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <nokia_lcd_set_pixel+0x2a>
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	6a 95       	dec	r22
 70c:	e2 f7       	brpl	.-8      	; 0x706 <nokia_lcd_set_pixel+0x26>
 70e:	90 81       	ld	r25, Z
 710:	89 2b       	or	r24, r25
 712:	80 83       	st	Z, r24
 714:	08 95       	ret
 716:	fc 01       	movw	r30, r24
 718:	e2 58       	subi	r30, 0x82	; 130
 71a:	fe 4f       	sbci	r31, 0xFE	; 254
 71c:	67 70       	andi	r22, 0x07	; 7
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <nokia_lcd_set_pixel+0x48>
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	6a 95       	dec	r22
 72a:	e2 f7       	brpl	.-8      	; 0x724 <nokia_lcd_set_pixel+0x44>
 72c:	80 95       	com	r24
 72e:	90 81       	ld	r25, Z
 730:	89 23       	and	r24, r25
 732:	80 83       	st	Z, r24
 734:	08 95       	ret

00000736 <nokia_lcd_write_char>:
 736:	5f 92       	push	r5
 738:	6f 92       	push	r6
 73a:	7f 92       	push	r7
 73c:	8f 92       	push	r8
 73e:	9f 92       	push	r9
 740:	af 92       	push	r10
 742:	bf 92       	push	r11
 744:	cf 92       	push	r12
 746:	df 92       	push	r13
 748:	ef 92       	push	r14
 74a:	ff 92       	push	r15
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	56 2e       	mov	r5, r22
 756:	26 2f       	mov	r18, r22
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	49 01       	movw	r8, r18
 75c:	88 0c       	add	r8, r8
 75e:	99 1c       	adc	r9, r9
 760:	88 0c       	add	r8, r8
 762:	99 1c       	adc	r9, r9
 764:	82 0e       	add	r8, r18
 766:	93 1e       	adc	r9, r19
 768:	18 14       	cp	r1, r8
 76a:	19 04       	cpc	r1, r9
 76c:	0c f0       	brlt	.+2      	; 0x770 <nokia_lcd_write_char+0x3a>
 76e:	59 c0       	rjmp	.+178    	; 0x822 <nokia_lcd_write_char+0xec>
 770:	89 01       	movw	r16, r18
 772:	00 0f       	add	r16, r16
 774:	11 1f       	adc	r17, r17
 776:	00 0f       	add	r16, r16
 778:	11 1f       	adc	r17, r17
 77a:	00 0f       	add	r16, r16
 77c:	11 1f       	adc	r17, r17
 77e:	02 1b       	sub	r16, r18
 780:	13 0b       	sbc	r17, r19
 782:	61 2c       	mov	r6, r1
 784:	a8 2e       	mov	r10, r24
 786:	b1 2c       	mov	r11, r1
 788:	c5 01       	movw	r24, r10
 78a:	80 97       	sbiw	r24, 0x20	; 32
 78c:	5c 01       	movw	r10, r24
 78e:	aa 0c       	add	r10, r10
 790:	bb 1c       	adc	r11, r11
 792:	aa 0c       	add	r10, r10
 794:	bb 1c       	adc	r11, r11
 796:	a8 0e       	add	r10, r24
 798:	b9 1e       	adc	r11, r25
 79a:	0f 2e       	mov	r0, r31
 79c:	f7 e7       	ldi	r31, 0x77	; 119
 79e:	cf 2e       	mov	r12, r31
 7a0:	f3 e0       	ldi	r31, 0x03	; 3
 7a2:	df 2e       	mov	r13, r31
 7a4:	f0 2d       	mov	r31, r0
 7a6:	0f 2e       	mov	r0, r31
 7a8:	f6 e7       	ldi	r31, 0x76	; 118
 7aa:	ef 2e       	mov	r14, r31
 7ac:	f3 e0       	ldi	r31, 0x03	; 3
 7ae:	ff 2e       	mov	r15, r31
 7b0:	f0 2d       	mov	r31, r0
 7b2:	2a c0       	rjmp	.+84     	; 0x808 <nokia_lcd_write_char+0xd2>
 7b4:	fe 01       	movw	r30, r28
 7b6:	24 91       	lpm	r18, Z
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	87 2d       	mov	r24, r7
 7bc:	65 2d       	mov	r22, r5
 7be:	46 d2       	rcall	.+1164   	; 0xc4c <__udivmodqi4>
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <nokia_lcd_write_char+0x90>
 7c2:	35 95       	asr	r19
 7c4:	27 95       	ror	r18
 7c6:	8a 95       	dec	r24
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <nokia_lcd_write_char+0x8c>
 7ca:	20 ff       	sbrs	r18, 0
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <nokia_lcd_write_char+0xaa>
 7ce:	f6 01       	movw	r30, r12
 7d0:	60 81       	ld	r22, Z
 7d2:	67 0d       	add	r22, r7
 7d4:	f7 01       	movw	r30, r14
 7d6:	80 81       	ld	r24, Z
 7d8:	41 e0       	ldi	r20, 0x01	; 1
 7da:	86 0d       	add	r24, r6
 7dc:	81 df       	rcall	.-254    	; 0x6e0 <nokia_lcd_set_pixel>
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <nokia_lcd_write_char+0xba>
 7e0:	f6 01       	movw	r30, r12
 7e2:	60 81       	ld	r22, Z
 7e4:	67 0d       	add	r22, r7
 7e6:	f7 01       	movw	r30, r14
 7e8:	80 81       	ld	r24, Z
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	86 0d       	add	r24, r6
 7ee:	78 df       	rcall	.-272    	; 0x6e0 <nokia_lcd_set_pixel>
 7f0:	73 94       	inc	r7
 7f2:	87 2d       	mov	r24, r7
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	80 17       	cp	r24, r16
 7f8:	91 07       	cpc	r25, r17
 7fa:	e4 f2       	brlt	.-72     	; 0x7b4 <nokia_lcd_write_char+0x7e>
 7fc:	63 94       	inc	r6
 7fe:	86 2d       	mov	r24, r6
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	88 15       	cp	r24, r8
 804:	99 05       	cpc	r25, r9
 806:	6c f4       	brge	.+26     	; 0x822 <nokia_lcd_write_char+0xec>
 808:	10 16       	cp	r1, r16
 80a:	11 06       	cpc	r1, r17
 80c:	bc f7       	brge	.-18     	; 0x7fc <nokia_lcd_write_char+0xc6>
 80e:	86 2d       	mov	r24, r6
 810:	65 2d       	mov	r22, r5
 812:	1c d2       	rcall	.+1080   	; 0xc4c <__udivmodqi4>
 814:	e5 01       	movw	r28, r10
 816:	c8 0f       	add	r28, r24
 818:	d1 1d       	adc	r29, r1
 81a:	c6 56       	subi	r28, 0x66	; 102
 81c:	df 4f       	sbci	r29, 0xFF	; 255
 81e:	71 2c       	mov	r7, r1
 820:	c9 cf       	rjmp	.-110    	; 0x7b4 <nokia_lcd_write_char+0x7e>
 822:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <nokia_lcd+0x1f8>
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	98 0f       	add	r25, r24
 82a:	85 2d       	mov	r24, r5
 82c:	88 0f       	add	r24, r24
 82e:	88 0f       	add	r24, r24
 830:	85 0d       	add	r24, r5
 832:	89 0f       	add	r24, r25
 834:	84 35       	cpi	r24, 0x54	; 84
 836:	18 f4       	brcc	.+6      	; 0x83e <nokia_lcd_write_char+0x108>
 838:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <nokia_lcd+0x1f8>
 83c:	0e c0       	rjmp	.+28     	; 0x85a <nokia_lcd_write_char+0x124>
 83e:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <nokia_lcd+0x1f8>
 842:	e7 e7       	ldi	r30, 0x77	; 119
 844:	f3 e0       	ldi	r31, 0x03	; 3
 846:	80 81       	ld	r24, Z
 848:	91 e0       	ldi	r25, 0x01	; 1
 84a:	98 0f       	add	r25, r24
 84c:	85 2d       	mov	r24, r5
 84e:	88 0f       	add	r24, r24
 850:	88 0f       	add	r24, r24
 852:	88 0f       	add	r24, r24
 854:	85 19       	sub	r24, r5
 856:	89 0f       	add	r24, r25
 858:	80 83       	st	Z, r24
 85a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <nokia_lcd+0x1f9>
 85e:	80 33       	cpi	r24, 0x30	; 48
 860:	20 f0       	brcs	.+8      	; 0x86a <nokia_lcd_write_char+0x134>
 862:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <nokia_lcd+0x1f8>
 866:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <nokia_lcd+0x1f9>
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	1f 91       	pop	r17
 870:	0f 91       	pop	r16
 872:	ff 90       	pop	r15
 874:	ef 90       	pop	r14
 876:	df 90       	pop	r13
 878:	cf 90       	pop	r12
 87a:	bf 90       	pop	r11
 87c:	af 90       	pop	r10
 87e:	9f 90       	pop	r9
 880:	8f 90       	pop	r8
 882:	7f 90       	pop	r7
 884:	6f 90       	pop	r6
 886:	5f 90       	pop	r5
 888:	08 95       	ret

0000088a <nokia_lcd_write_string>:
 88a:	1f 93       	push	r17
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29
 890:	ec 01       	movw	r28, r24
 892:	88 81       	ld	r24, Y
 894:	88 23       	and	r24, r24
 896:	39 f0       	breq	.+14     	; 0x8a6 <nokia_lcd_write_string+0x1c>
 898:	16 2f       	mov	r17, r22
 89a:	21 96       	adiw	r28, 0x01	; 1
 89c:	61 2f       	mov	r22, r17
 89e:	4b df       	rcall	.-362    	; 0x736 <nokia_lcd_write_char>
 8a0:	89 91       	ld	r24, Y+
 8a2:	81 11       	cpse	r24, r1
 8a4:	fb cf       	rjmp	.-10     	; 0x89c <nokia_lcd_write_string+0x12>
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	1f 91       	pop	r17
 8ac:	08 95       	ret

000008ae <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 8ae:	0f 93       	push	r16
 8b0:	1f 93       	push	r17
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 8b6:	80 e8       	ldi	r24, 0x80	; 128
 8b8:	1c dd       	rcall	.-1480   	; 0x2f2 <write_cmd>
	write_cmd(0x40);
 8ba:	80 e4       	ldi	r24, 0x40	; 64
 8bc:	1a dd       	rcall	.-1484   	; 0x2f2 <write_cmd>
 8be:	ce e7       	ldi	r28, 0x7E	; 126
 8c0:	d1 e0       	ldi	r29, 0x01	; 1
 8c2:	06 e7       	ldi	r16, 0x76	; 118
 8c4:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 8c6:	61 e0       	ldi	r22, 0x01	; 1
 8c8:	89 91       	ld	r24, Y+
 8ca:	f5 dc       	rcall	.-1558   	; 0x2b6 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 8cc:	c0 17       	cp	r28, r16
 8ce:	d1 07       	cpc	r29, r17
 8d0:	d1 f7       	brne	.-12     	; 0x8c6 <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	08 95       	ret

000008dc <LCD_display>:
long LCD_counter;
short button;


void LCD_display(int l, char s)
{
 8dc:	ef 92       	push	r14
 8de:	ff 92       	push	r15
 8e0:	0f 93       	push	r16
 8e2:	1f 93       	push	r17
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	e8 2e       	mov	r14, r24
 8ea:	f6 2e       	mov	r15, r22
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 8ec:	06 e7       	ldi	r16, 0x76	; 118
 8ee:	13 e0       	ldi	r17, 0x03	; 3
 8f0:	f8 01       	movw	r30, r16
 8f2:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 8f4:	c7 e7       	ldi	r28, 0x77	; 119
 8f6:	d3 e0       	ldi	r29, 0x03	; 3
 8f8:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0, 0);
	nokia_lcd_write_string("Level: ", 1); //display the level number!!! HELP
 8fa:	61 e0       	ldi	r22, 0x01	; 1
 8fc:	8c e3       	ldi	r24, 0x3C	; 60
 8fe:	91 e0       	ldi	r25, 0x01	; 1
 900:	c4 df       	rcall	.-120    	; 0x88a <nokia_lcd_write_string>
	nokia_lcd_write_char((l + 48), 1);
 902:	61 e0       	ldi	r22, 0x01	; 1
 904:	80 e3       	ldi	r24, 0x30	; 48
 906:	8e 0d       	add	r24, r14
	nokia_lcd_render();
 908:	16 df       	rcall	.-468    	; 0x736 <nokia_lcd_write_char>
 90a:	d1 df       	rcall	.-94     	; 0x8ae <nokia_lcd_render>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 90c:	f8 01       	movw	r30, r16
 90e:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 910:	82 e1       	ldi	r24, 0x12	; 18
 912:	88 83       	st	Y, r24
	nokia_lcd_set_cursor(0, 18);
	nokia_lcd_write_string("Score: ", 1); //display the score!!! HELP
 914:	61 e0       	ldi	r22, 0x01	; 1
 916:	84 e4       	ldi	r24, 0x44	; 68
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	b7 df       	rcall	.-146    	; 0x88a <nokia_lcd_write_string>
	nokia_lcd_write_char((s + 48), 1);
 91c:	61 e0       	ldi	r22, 0x01	; 1
 91e:	80 e3       	ldi	r24, 0x30	; 48
 920:	8f 0d       	add	r24, r15
 922:	09 df       	rcall	.-494    	; 0x736 <nokia_lcd_write_char>
	nokia_lcd_render();
 924:	c4 df       	rcall	.-120    	; 0x8ae <nokia_lcd_render>
 926:	df 91       	pop	r29
	return;
}
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	0f 91       	pop	r16
 92e:	ff 90       	pop	r15
 930:	ef 90       	pop	r14
 932:	08 95       	ret

00000934 <nokia_LCD_tick>:
 934:	4f 92       	push	r4

enum Nokia_LCD_States {Nokia_LCD_Start, Nokia_LCD_wait_before_level, Nokia_LCD_levels, Nokia_LCD_Compare, Nokia_LCD_Continue} Nokia_LCD_State;
void nokia_LCD_tick() 
{					
 936:	5f 92       	push	r5
 938:	6f 92       	push	r6
 93a:	7f 92       	push	r7
 93c:	9f 92       	push	r9
 93e:	af 92       	push	r10
 940:	bf 92       	push	r11
 942:	cf 92       	push	r12
 944:	df 92       	push	r13
 946:	ef 92       	push	r14
 948:	ff 92       	push	r15
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	2a 97       	sbiw	r28, 0x0a	; 10
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
	char countdown;			
	char snum[10];					
	button = ~PINB & 0x20;											//checking for button press to move on to levels button press 
 962:	83 b1       	in	r24, 0x03	; 3
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	80 95       	com	r24
 968:	90 95       	com	r25
 96a:	80 72       	andi	r24, 0x20	; 32
 96c:	99 27       	eor	r25, r25
 96e:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <button+0x1>
 972:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <button>
	switch(Nokia_LCD_State)	//transitions
 976:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <Nokia_LCD_State>
 97a:	22 30       	cpi	r18, 0x02	; 2
 97c:	e1 f0       	breq	.+56     	; 0x9b6 <nokia_LCD_tick+0x82>
 97e:	30 f4       	brcc	.+12     	; 0x98c <nokia_LCD_tick+0x58>
 980:	22 23       	and	r18, r18
 982:	39 f1       	breq	.+78     	; 0x9d2 <nokia_LCD_tick+0x9e>
 984:	21 30       	cpi	r18, 0x01	; 1
 986:	09 f4       	brne	.+2      	; 0x98a <nokia_LCD_tick+0x56>
 988:	46 c0       	rjmp	.+140    	; 0xa16 <nokia_LCD_tick+0xe2>
 98a:	2e c1       	rjmp	.+604    	; 0xbe8 <nokia_LCD_tick+0x2b4>
 98c:	23 30       	cpi	r18, 0x03	; 3
 98e:	09 f4       	brne	.+2      	; 0x992 <nokia_LCD_tick+0x5e>
 990:	f7 c0       	rjmp	.+494    	; 0xb80 <nokia_LCD_tick+0x24c>
 992:	24 30       	cpi	r18, 0x04	; 4
 994:	09 f0       	breq	.+2      	; 0x998 <nokia_LCD_tick+0x64>
 996:	28 c1       	rjmp	.+592    	; 0xbe8 <nokia_LCD_tick+0x2b4>
			LCD_counter = 0;
			Nokia_LCD_State =  Nokia_LCD_Continue; 
			break;

		case Nokia_LCD_Continue:
			while(LCD_counter < 30000)											//30,000 ms is 30 seconds
 998:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <LCD_counter>
 99c:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <LCD_counter+0x1>
 9a0:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <LCD_counter+0x2>
 9a4:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <LCD_counter+0x3>
 9a8:	80 33       	cpi	r24, 0x30	; 48
 9aa:	95 47       	sbci	r25, 0x75	; 117
 9ac:	a1 05       	cpc	r26, r1
 9ae:	b1 05       	cpc	r27, r1
 9b0:	0c f4       	brge	.+2      	; 0x9b4 <nokia_LCD_tick+0x80>
 9b2:	69 c0       	rjmp	.+210    	; 0xa86 <nokia_LCD_tick+0x152>
 9b4:	d9 c0       	rjmp	.+434    	; 0xb68 <nokia_LCD_tick+0x234>
				Nokia_LCD_State = Nokia_LCD_levels;
			}
			break;

		case Nokia_LCD_levels:
			while(LCD_counter < 100000)											//10,000 ms is 10 seconds 10 second system period
 9b6:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <LCD_counter>
 9ba:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <LCD_counter+0x1>
 9be:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <LCD_counter+0x2>
 9c2:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <LCD_counter+0x3>
 9c6:	80 3a       	cpi	r24, 0xA0	; 160
 9c8:	96 48       	sbci	r25, 0x86	; 134
 9ca:	a1 40       	sbci	r26, 0x01	; 1
 9cc:	b1 05       	cpc	r27, r1
 9ce:	a4 f1       	brlt	.+104    	; 0xa38 <nokia_LCD_tick+0x104>
 9d0:	4e c0       	rjmp	.+156    	; 0xa6e <nokia_LCD_tick+0x13a>
	char snum[10];					
	button = ~PINB & 0x20;											//checking for button press to move on to levels button press 
	switch(Nokia_LCD_State)	//transitions
	{	
		case Nokia_LCD_Start:													//starting stuff
			nokia_lcd_init();
 9d2:	3f de       	rcall	.-898    	; 0x652 <nokia_lcd_init>
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 9d4:	80 e2       	ldi	r24, 0x20	; 32
 9d6:	8d dc       	rcall	.-1766   	; 0x2f2 <write_cmd>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 9d8:	0f 2e       	mov	r0, r31
 9da:	f6 e7       	ldi	r31, 0x76	; 118
 9dc:	ef 2e       	mov	r14, r31
 9de:	f3 e0       	ldi	r31, 0x03	; 3
 9e0:	ff 2e       	mov	r15, r31
 9e2:	f0 2d       	mov	r31, r0
 9e4:	f7 01       	movw	r30, r14
 9e6:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 9e8:	07 e7       	ldi	r16, 0x77	; 119
 9ea:	13 e0       	ldi	r17, 0x03	; 3
 9ec:	f8 01       	movw	r30, r16
 9ee:	10 82       	st	Z, r1
			nokia_lcd_power(1);
			nokia_lcd_set_cursor(0, 0);
			nokia_lcd_write_string("MEMORY", 2);
 9f0:	62 e0       	ldi	r22, 0x02	; 2
 9f2:	8c e4       	ldi	r24, 0x4C	; 76
 9f4:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_render();
 9f6:	49 df       	rcall	.-366    	; 0x88a <nokia_lcd_write_string>
 9f8:	5a df       	rcall	.-332    	; 0x8ae <nokia_lcd_render>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 9fa:	f7 01       	movw	r30, r14
 9fc:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 9fe:	82 e1       	ldi	r24, 0x12	; 18
 a00:	f8 01       	movw	r30, r16
			nokia_lcd_set_cursor(0, 18);
			nokia_lcd_write_string("Press button to continue.", 1);				
 a02:	80 83       	st	Z, r24
 a04:	61 e0       	ldi	r22, 0x01	; 1
 a06:	83 e5       	ldi	r24, 0x53	; 83
 a08:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_render();													//want this to display until user gives input
 a0a:	3f df       	rcall	.-386    	; 0x88a <nokia_lcd_write_string>
 a0c:	50 df       	rcall	.-352    	; 0x8ae <nokia_lcd_render>
			Nokia_LCD_State = Nokia_LCD_wait_before_level;						//go to the wait state and wait for input from button
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Nokia_LCD_State>
			break;
			
		case Nokia_LCD_wait_before_level:										//loop in wait state until user presses something
			if(button)															//in the wait state if the user presses the joystick continue to level 1
 a14:	eb c0       	rjmp	.+470    	; 0xbec <nokia_LCD_tick+0x2b8>
 a16:	89 2b       	or	r24, r25
 a18:	09 f4       	brne	.+2      	; 0xa1c <nokia_LCD_tick+0xe8>
			{
				nokia_lcd_clear();												//clear the screen
 a1a:	e8 c0       	rjmp	.+464    	; 0xbec <nokia_LCD_tick+0x2b8>
 a1c:	50 de       	rcall	.-864    	; 0x6be <nokia_lcd_clear>
				level++;														//level turns to 1 first time
 a1e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <level>
 a22:	8f 5f       	subi	r24, 0xFF	; 255
 a24:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <level>
				Nokia_LCD_State = Nokia_LCD_levels;
 a28:	92 e0       	ldi	r25, 0x02	; 2
 a2a:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <Nokia_LCD_State>
		case Nokia_LCD_Start:
			break;
		case Nokia_LCD_wait_before_level:
			break;
		case Nokia_LCD_levels:
			LCD_display(level, score);			//display level and score
 a2e:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <score>
 a32:	90 e0       	ldi	r25, 0x00	; 0
			//display the level image on the matrix for 10 seconds! HELP!
		
			//each level has a different picture which will display on the LED Matrix.
			// so depending on the level send output to the matrix state machine.
			break;
 a34:	53 df       	rcall	.-346    	; 0x8dc <LCD_display>
			break;

		case Nokia_LCD_levels:
			while(LCD_counter < 100000)											//10,000 ms is 10 seconds 10 second system period
			{
				LED_Matrix_Tick(LED_Matrix_levels);								//go to levels state for 10 seconds
 a36:	da c0       	rjmp	.+436    	; 0xbec <nokia_LCD_tick+0x2b8>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	ce dc       	rcall	.-1636   	; 0x3da <LED_Matrix_Tick>
				LCD_counter++;
 a3e:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <LCD_counter>
 a42:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <LCD_counter+0x1>
 a46:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <LCD_counter+0x2>
 a4a:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <LCD_counter+0x3>
 a4e:	01 96       	adiw	r24, 0x01	; 1
 a50:	a1 1d       	adc	r26, r1
 a52:	b1 1d       	adc	r27, r1
 a54:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <LCD_counter>
 a58:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <LCD_counter+0x1>
 a5c:	a0 93 93 03 	sts	0x0393, r26	; 0x800393 <LCD_counter+0x2>
 a60:	b0 93 94 03 	sts	0x0394, r27	; 0x800394 <LCD_counter+0x3>
				Nokia_LCD_State = Nokia_LCD_levels;
			}
			break;

		case Nokia_LCD_levels:
			while(LCD_counter < 100000)											//10,000 ms is 10 seconds 10 second system period
 a64:	80 3a       	cpi	r24, 0xA0	; 160
 a66:	96 48       	sbci	r25, 0x86	; 134
 a68:	a1 40       	sbci	r26, 0x01	; 1
 a6a:	b1 05       	cpc	r27, r1
 a6c:	2c f3       	brlt	.-54     	; 0xa38 <nokia_LCD_tick+0x104>
			{
				LED_Matrix_Tick(LED_Matrix_levels);								//go to levels state for 10 seconds
				LCD_counter++;
			}
			LCD_counter = 0;
 a6e:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <LCD_counter>
 a72:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <LCD_counter+0x1>
 a76:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <LCD_counter+0x2>
 a7a:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <LCD_counter+0x3>
			Nokia_LCD_State =  Nokia_LCD_Continue; 
 a7e:	84 e0       	ldi	r24, 0x04	; 4
 a80:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Nokia_LCD_State>
			break;
 a84:	b3 c0       	rjmp	.+358    	; 0xbec <nokia_LCD_tick+0x2b8>

		case Nokia_LCD_Continue:
			while(LCD_counter < 30000)											//30,000 ms is 30 seconds
			{				
				LED_Matrix_Tick(LED_Matrix_cursor);								// gives control to matrix cursor // Joystick less sensitive this way
				if((LCD_counter % 100) == 0)									
 a86:	0f 2e       	mov	r0, r31
 a88:	f4 e6       	ldi	r31, 0x64	; 100
 a8a:	4f 2e       	mov	r4, r31
 a8c:	51 2c       	mov	r5, r1
 a8e:	61 2c       	mov	r6, r1
 a90:	71 2c       	mov	r7, r1
 a92:	f0 2d       	mov	r31, r0
					Joystick_tick(Joystick_navigate);							// gives control to the joystick
					//LED_Matrix_Tick(LED_Matrix_cursor);						// gives control to matrix cursor
				}
				
				countdown = 30;													//countdown starts at 30 seconds
				if((LCD_counter % 1000) == 0)									//every second
 a94:	0f 2e       	mov	r0, r31
 a96:	f8 ee       	ldi	r31, 0xE8	; 232
 a98:	cf 2e       	mov	r12, r31
 a9a:	f3 e0       	ldi	r31, 0x03	; 3
 a9c:	df 2e       	mov	r13, r31
 a9e:	e1 2c       	mov	r14, r1
 aa0:	f1 2c       	mov	r15, r1
 aa2:	f0 2d       	mov	r31, r0
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 aa4:	0f 2e       	mov	r0, r31
 aa6:	f6 e7       	ldi	r31, 0x76	; 118
 aa8:	af 2e       	mov	r10, r31
 aaa:	f3 e0       	ldi	r31, 0x03	; 3
 aac:	bf 2e       	mov	r11, r31
	nokia_lcd.cursor_y = y;
 aae:	f0 2d       	mov	r31, r0
 ab0:	07 e7       	ldi	r16, 0x77	; 119
 ab2:	13 e0       	ldi	r17, 0x03	; 3
 ab4:	0f 2e       	mov	r0, r31
 ab6:	fa e0       	ldi	r31, 0x0A	; 10
 ab8:	9f 2e       	mov	r9, r31
			break;

		case Nokia_LCD_Continue:
			while(LCD_counter < 30000)											//30,000 ms is 30 seconds
			{				
				LED_Matrix_Tick(LED_Matrix_cursor);								// gives control to matrix cursor // Joystick less sensitive this way
 aba:	f0 2d       	mov	r31, r0
 abc:	82 e0       	ldi	r24, 0x02	; 2
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	8c dc       	rcall	.-1768   	; 0x3da <LED_Matrix_Tick>
				if((LCD_counter % 100) == 0)									
 ac2:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <LCD_counter>
 ac6:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <LCD_counter+0x1>
 aca:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <LCD_counter+0x2>
 ace:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <LCD_counter+0x3>
 ad2:	a3 01       	movw	r20, r6
 ad4:	92 01       	movw	r18, r4
 ad6:	c6 d0       	rcall	.+396    	; 0xc64 <__divmodsi4>
 ad8:	67 2b       	or	r22, r23
 ada:	68 2b       	or	r22, r24
 adc:	69 2b       	or	r22, r25
				{
					Joystick_tick(Joystick_navigate);							// gives control to the joystick
 ade:	19 f4       	brne	.+6      	; 0xae6 <nokia_LCD_tick+0x1b2>
 ae0:	80 e0       	ldi	r24, 0x00	; 0
 ae2:	90 e0       	ldi	r25, 0x00	; 0
					//LED_Matrix_Tick(LED_Matrix_cursor);						// gives control to matrix cursor
				}
				
				countdown = 30;													//countdown starts at 30 seconds
				if((LCD_counter % 1000) == 0)									//every second
 ae4:	5d dd       	rcall	.-1350   	; 0x5a0 <Joystick_tick>
 ae6:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <LCD_counter>
 aea:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <LCD_counter+0x1>
 aee:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <LCD_counter+0x2>
 af2:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <LCD_counter+0x3>
 af6:	a7 01       	movw	r20, r14
 af8:	96 01       	movw	r18, r12
 afa:	b4 d0       	rcall	.+360    	; 0xc64 <__divmodsi4>
 afc:	67 2b       	or	r22, r23
 afe:	68 2b       	or	r22, r24
 b00:	69 2b       	or	r22, r25
				{
					itoa(countdown, snum, 10);									//turn countdown into decimal number 
 b02:	c9 f4       	brne	.+50     	; 0xb36 <nokia_LCD_tick+0x202>
 b04:	4a e0       	ldi	r20, 0x0A	; 10
 b06:	50 e0       	ldi	r21, 0x00	; 0
 b08:	be 01       	movw	r22, r28
 b0a:	6f 5f       	subi	r22, 0xFF	; 255
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8e e1       	ldi	r24, 0x1E	; 30
 b10:	90 e0       	ldi	r25, 0x00	; 0
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 b12:	ef d0       	rcall	.+478    	; 0xcf2 <itoa>
	nokia_lcd.cursor_y = y;
 b14:	f5 01       	movw	r30, r10
					nokia_lcd_set_cursor(0, 0);
					nokia_lcd_write_string("Countdown: ", 1);
 b16:	10 82       	st	Z, r1
 b18:	f8 01       	movw	r30, r16
 b1a:	10 82       	st	Z, r1
 b1c:	61 e0       	ldi	r22, 0x01	; 1
 b1e:	8d e6       	ldi	r24, 0x6D	; 109
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 b20:	91 e0       	ldi	r25, 0x01	; 1
 b22:	b3 de       	rcall	.-666    	; 0x88a <nokia_lcd_write_string>
	nokia_lcd.cursor_y = y;
 b24:	f5 01       	movw	r30, r10
 b26:	10 82       	st	Z, r1
					nokia_lcd_set_cursor(0, 10);								
					nokia_lcd_write_string(snum, 1);							//print countdown
 b28:	f8 01       	movw	r30, r16
 b2a:	90 82       	st	Z, r9
 b2c:	61 e0       	ldi	r22, 0x01	; 1
 b2e:	ce 01       	movw	r24, r28
 b30:	01 96       	adiw	r24, 0x01	; 1
					nokia_lcd_render();
 b32:	ab de       	rcall	.-682    	; 0x88a <nokia_lcd_write_string>
 b34:	bc de       	rcall	.-648    	; 0x8ae <nokia_lcd_render>
					countdown--;						
				}
				LCD_counter++;				
 b36:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <LCD_counter>
 b3a:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <LCD_counter+0x1>
 b3e:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <LCD_counter+0x2>
 b42:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <LCD_counter+0x3>
 b46:	01 96       	adiw	r24, 0x01	; 1
 b48:	a1 1d       	adc	r26, r1
 b4a:	b1 1d       	adc	r27, r1
 b4c:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <LCD_counter>
 b50:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <LCD_counter+0x1>
 b54:	a0 93 93 03 	sts	0x0393, r26	; 0x800393 <LCD_counter+0x2>
 b58:	b0 93 94 03 	sts	0x0394, r27	; 0x800394 <LCD_counter+0x3>
			LCD_counter = 0;
			Nokia_LCD_State =  Nokia_LCD_Continue; 
			break;

		case Nokia_LCD_Continue:
			while(LCD_counter < 30000)											//30,000 ms is 30 seconds
 b5c:	80 33       	cpi	r24, 0x30	; 48
 b5e:	95 47       	sbci	r25, 0x75	; 117
 b60:	a1 05       	cpc	r26, r1
 b62:	b1 05       	cpc	r27, r1
 b64:	0c f4       	brge	.+2      	; 0xb68 <nokia_LCD_tick+0x234>
 b66:	aa cf       	rjmp	.-172    	; 0xabc <nokia_LCD_tick+0x188>
					countdown--;						
				}
				LCD_counter++;				
			}
			
			LCD_counter = 0;
 b68:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <LCD_counter>
 b6c:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <LCD_counter+0x1>
 b70:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <LCD_counter+0x2>
 b74:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <LCD_counter+0x3>
			Nokia_LCD_State = Nokia_LCD_Compare;
 b78:	83 e0       	ldi	r24, 0x03	; 3
 b7a:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Nokia_LCD_State>
			break;
 b7e:	36 c0       	rjmp	.+108    	; 0xbec <nokia_LCD_tick+0x2b8>
		
		case Nokia_LCD_Compare:
			for(current_row = 0; current_row < 8; current_row++)				 
 b80:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <current_row>
 b84:	aa e7       	ldi	r26, 0x7A	; 122
 b86:	b3 e0       	ldi	r27, 0x03	; 3
			{
				if(user_input[current_row] == levels[level-1][current_row])		//if the user_input array matches the level array 
 b88:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <level>
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	ee 0f       	add	r30, r30
 b90:	ff 1f       	adc	r31, r31
 b92:	ec 5f       	subi	r30, 0xFC	; 252
 b94:	fe 4f       	sbci	r31, 0xFE	; 254
 b96:	01 90       	ld	r0, Z+
 b98:	f0 81       	ld	r31, Z
 b9a:	e0 2d       	mov	r30, r0
 b9c:	80 e0       	ldi	r24, 0x00	; 0
 b9e:	2d 91       	ld	r18, X+
 ba0:	91 91       	ld	r25, Z+
 ba2:	29 13       	cpse	r18, r25
 ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <nokia_LCD_tick+0x27c>
				{
					row_is_correct += 1;										//for all of the 8 values in the array
 ba6:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <__data_end>
 baa:	9f 5f       	subi	r25, 0xFF	; 255
 bac:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <__data_end>
			LCD_counter = 0;
			Nokia_LCD_State = Nokia_LCD_Compare;
			break;
		
		case Nokia_LCD_Compare:
			for(current_row = 0; current_row < 8; current_row++)				 
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <current_row>
 bb6:	88 30       	cpi	r24, 0x08	; 8
 bb8:	91 f7       	brne	.-28     	; 0xb9e <nokia_LCD_tick+0x26a>
				if(user_input[current_row] == levels[level-1][current_row])		//if the user_input array matches the level array 
				{
					row_is_correct += 1;										//for all of the 8 values in the array
				}
			}
			if(row_is_correct == 8)
 bba:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
			{
				score += 20;													//add 20 points to the score
 bbe:	88 30       	cpi	r24, 0x08	; 8
 bc0:	29 f4       	brne	.+10     	; 0xbcc <nokia_LCD_tick+0x298>
 bc2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <score>
 bc6:	8c 5e       	subi	r24, 0xEC	; 236
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 bc8:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <score>
	nokia_lcd.cursor_y = y;
 bcc:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <nokia_lcd+0x1f8>
 bd0:	82 e1       	ldi	r24, 0x12	; 18
			}
			
			nokia_lcd_set_cursor(0, 18);
			nokia_lcd_write_string("Press button to continue.", 1);				//want this to display until user gives input
 bd2:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <nokia_lcd+0x1f9>
 bd6:	61 e0       	ldi	r22, 0x01	; 1
 bd8:	83 e5       	ldi	r24, 0x53	; 83
 bda:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_render();
 bdc:	56 de       	rcall	.-852    	; 0x88a <nokia_lcd_write_string>
 bde:	67 de       	rcall	.-818    	; 0x8ae <nokia_lcd_render>

			Nokia_LCD_State = Nokia_LCD_wait_before_level;						//go back to waiting before user gives an input before the next level
 be0:	81 e0       	ldi	r24, 0x01	; 1
 be2:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Nokia_LCD_State>
			break;
 be6:	02 c0       	rjmp	.+4      	; 0xbec <nokia_LCD_tick+0x2b8>
			
		default:
			Nokia_LCD_State = Nokia_LCD_Start;
 be8:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <Nokia_LCD_State>
		default:
			break;
	}
	
	//PORTC = output;
}	//end of Button LA function
 bec:	2a 96       	adiw	r28, 0x0a	; 10
 bee:	0f b6       	in	r0, 0x3f	; 63
 bf0:	f8 94       	cli
 bf2:	de bf       	out	0x3e, r29	; 62
 bf4:	0f be       	out	0x3f, r0	; 63
 bf6:	cd bf       	out	0x3d, r28	; 61
 bf8:	df 91       	pop	r29
 bfa:	cf 91       	pop	r28
 bfc:	1f 91       	pop	r17
 bfe:	0f 91       	pop	r16
 c00:	ff 90       	pop	r15
 c02:	ef 90       	pop	r14
 c04:	df 90       	pop	r13
 c06:	cf 90       	pop	r12
 c08:	bf 90       	pop	r11
 c0a:	af 90       	pop	r10
 c0c:	9f 90       	pop	r9
 c0e:	7f 90       	pop	r7
 c10:	6f 90       	pop	r6
 c12:	5f 90       	pop	r5
 c14:	4f 90       	pop	r4
 c16:	08 95       	ret

00000c18 <main>:
int main(void)
{
	//PA[0] connected to potentiometer giving input //LEFT and RIGHT for joystick right now
	//PA[1] want to connect to  y axis
	
	DDRA = 0x00; PORTA = 0xFF; //input from joystick
 c18:	11 b8       	out	0x01, r1	; 1
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x1F; PORTB = 0xE0; //output to the LCD //one input from button
 c1e:	9f e1       	ldi	r25, 0x1F	; 31
 c20:	94 b9       	out	0x04, r25	; 4
 c22:	90 ee       	ldi	r25, 0xE0	; 224
 c24:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0x00; //Pattern on each row of LED Matrix
 c26:	87 b9       	out	0x07, r24	; 7
 c28:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Row # 
 c2a:	8a b9       	out	0x0a, r24	; 10
 c2c:	1b b8       	out	0x0b, r1	; 11

	ADC_init();
 c2e:	95 dc       	rcall	.-1750   	; 0x55a <ADC_init>
	//char snum[10]; //Char array holds ADC Value to display on LCD
	
	TimerSet(10); //i'm using 10 here because it easily takes the input from the joystick even if someone decides to just flick it 
 c30:	6a e0       	ldi	r22, 0x0A	; 10
 c32:	70 e0       	ldi	r23, 0x00	; 0
 c34:	80 e0       	ldi	r24, 0x00	; 0
 c36:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();	
 c38:	5f db       	rcall	.-2370   	; 0x2f8 <TimerSet>
 c3a:	6f db       	rcall	.-2338   	; 0x31a <TimerOn>
	
	while(1)
	{
		//LED_Matrix_Tick(LED_Matrix_levels);
		nokia_LCD_tick();
 c3c:	7b de       	rcall	.-778    	; 0x934 <nokia_LCD_tick>
 c3e:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <TimerFlag>
		while(!TimerFlag);
 c42:	88 23       	and	r24, r24
 c44:	e1 f3       	breq	.-8      	; 0xc3e <main+0x26>
 c46:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <TimerFlag>
			//LED_Matrix_Tick(LED_Matrix_cursor);				//LED MATRIX STATE MACHINE
			
		//Joystick_tick(Joystick_navigate);
		TimerFlag = 0;	
 c4a:	f8 cf       	rjmp	.-16     	; 0xc3c <main+0x24>

00000c4c <__udivmodqi4>:
	}
 c4c:	99 1b       	sub	r25, r25
 c4e:	79 e0       	ldi	r23, 0x09	; 9
 c50:	04 c0       	rjmp	.+8      	; 0xc5a <__udivmodqi4_ep>

00000c52 <__udivmodqi4_loop>:
 c52:	99 1f       	adc	r25, r25
 c54:	96 17       	cp	r25, r22
 c56:	08 f0       	brcs	.+2      	; 0xc5a <__udivmodqi4_ep>
 c58:	96 1b       	sub	r25, r22

00000c5a <__udivmodqi4_ep>:
 c5a:	88 1f       	adc	r24, r24
 c5c:	7a 95       	dec	r23
 c5e:	c9 f7       	brne	.-14     	; 0xc52 <__udivmodqi4_loop>
 c60:	80 95       	com	r24
 c62:	08 95       	ret

00000c64 <__divmodsi4>:
 c64:	05 2e       	mov	r0, r21
 c66:	97 fb       	bst	r25, 7
 c68:	16 f4       	brtc	.+4      	; 0xc6e <__divmodsi4+0xa>
 c6a:	00 94       	com	r0
 c6c:	0f d0       	rcall	.+30     	; 0xc8c <__negsi2>
 c6e:	57 fd       	sbrc	r21, 7
 c70:	05 d0       	rcall	.+10     	; 0xc7c <__divmodsi4_neg2>
 c72:	1d d0       	rcall	.+58     	; 0xcae <__udivmodsi4>
 c74:	07 fc       	sbrc	r0, 7
 c76:	02 d0       	rcall	.+4      	; 0xc7c <__divmodsi4_neg2>
 c78:	46 f4       	brtc	.+16     	; 0xc8a <__divmodsi4_exit>
 c7a:	08 c0       	rjmp	.+16     	; 0xc8c <__negsi2>

00000c7c <__divmodsi4_neg2>:
 c7c:	50 95       	com	r21
 c7e:	40 95       	com	r20
 c80:	30 95       	com	r19
 c82:	21 95       	neg	r18
 c84:	3f 4f       	sbci	r19, 0xFF	; 255
 c86:	4f 4f       	sbci	r20, 0xFF	; 255
 c88:	5f 4f       	sbci	r21, 0xFF	; 255

00000c8a <__divmodsi4_exit>:
 c8a:	08 95       	ret

00000c8c <__negsi2>:
 c8c:	90 95       	com	r25
 c8e:	80 95       	com	r24
 c90:	70 95       	com	r23
 c92:	61 95       	neg	r22
 c94:	7f 4f       	sbci	r23, 0xFF	; 255
 c96:	8f 4f       	sbci	r24, 0xFF	; 255
 c98:	9f 4f       	sbci	r25, 0xFF	; 255
 c9a:	08 95       	ret

00000c9c <__tablejump2__>:
 c9c:	ee 0f       	add	r30, r30
 c9e:	ff 1f       	adc	r31, r31
 ca0:	00 24       	eor	r0, r0
 ca2:	00 1c       	adc	r0, r0
 ca4:	0b be       	out	0x3b, r0	; 59
 ca6:	07 90       	elpm	r0, Z+
 ca8:	f6 91       	elpm	r31, Z
 caa:	e0 2d       	mov	r30, r0
 cac:	09 94       	ijmp

00000cae <__udivmodsi4>:
 cae:	a1 e2       	ldi	r26, 0x21	; 33
 cb0:	1a 2e       	mov	r1, r26
 cb2:	aa 1b       	sub	r26, r26
 cb4:	bb 1b       	sub	r27, r27
 cb6:	fd 01       	movw	r30, r26
 cb8:	0d c0       	rjmp	.+26     	; 0xcd4 <__udivmodsi4_ep>

00000cba <__udivmodsi4_loop>:
 cba:	aa 1f       	adc	r26, r26
 cbc:	bb 1f       	adc	r27, r27
 cbe:	ee 1f       	adc	r30, r30
 cc0:	ff 1f       	adc	r31, r31
 cc2:	a2 17       	cp	r26, r18
 cc4:	b3 07       	cpc	r27, r19
 cc6:	e4 07       	cpc	r30, r20
 cc8:	f5 07       	cpc	r31, r21
 cca:	20 f0       	brcs	.+8      	; 0xcd4 <__udivmodsi4_ep>
 ccc:	a2 1b       	sub	r26, r18
 cce:	b3 0b       	sbc	r27, r19
 cd0:	e4 0b       	sbc	r30, r20
 cd2:	f5 0b       	sbc	r31, r21

00000cd4 <__udivmodsi4_ep>:
 cd4:	66 1f       	adc	r22, r22
 cd6:	77 1f       	adc	r23, r23
 cd8:	88 1f       	adc	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	1a 94       	dec	r1
 cde:	69 f7       	brne	.-38     	; 0xcba <__udivmodsi4_loop>
 ce0:	60 95       	com	r22
 ce2:	70 95       	com	r23
 ce4:	80 95       	com	r24
 ce6:	90 95       	com	r25
 ce8:	9b 01       	movw	r18, r22
 cea:	ac 01       	movw	r20, r24
 cec:	bd 01       	movw	r22, r26
 cee:	cf 01       	movw	r24, r30
 cf0:	08 95       	ret

00000cf2 <itoa>:
 cf2:	45 32       	cpi	r20, 0x25	; 37
 cf4:	51 05       	cpc	r21, r1
 cf6:	18 f4       	brcc	.+6      	; 0xcfe <itoa+0xc>
 cf8:	42 30       	cpi	r20, 0x02	; 2
 cfa:	08 f0       	brcs	.+2      	; 0xcfe <itoa+0xc>
 cfc:	04 c0       	rjmp	.+8      	; 0xd06 <__itoa_ncheck>
 cfe:	fb 01       	movw	r30, r22
 d00:	10 82       	st	Z, r1
 d02:	cb 01       	movw	r24, r22
 d04:	08 95       	ret

00000d06 <__itoa_ncheck>:
 d06:	bb 27       	eor	r27, r27
 d08:	4a 30       	cpi	r20, 0x0A	; 10
 d0a:	31 f4       	brne	.+12     	; 0xd18 <__itoa_ncheck+0x12>
 d0c:	99 23       	and	r25, r25
 d0e:	22 f4       	brpl	.+8      	; 0xd18 <__itoa_ncheck+0x12>
 d10:	bd e2       	ldi	r27, 0x2D	; 45
 d12:	90 95       	com	r25
 d14:	81 95       	neg	r24
 d16:	9f 4f       	sbci	r25, 0xFF	; 255
 d18:	01 c0       	rjmp	.+2      	; 0xd1c <__utoa_common>

00000d1a <__utoa_ncheck>:
 d1a:	bb 27       	eor	r27, r27

00000d1c <__utoa_common>:
 d1c:	fb 01       	movw	r30, r22
 d1e:	55 27       	eor	r21, r21
 d20:	aa 27       	eor	r26, r26
 d22:	88 0f       	add	r24, r24
 d24:	99 1f       	adc	r25, r25
 d26:	aa 1f       	adc	r26, r26
 d28:	a4 17       	cp	r26, r20
 d2a:	10 f0       	brcs	.+4      	; 0xd30 <__utoa_common+0x14>
 d2c:	a4 1b       	sub	r26, r20
 d2e:	83 95       	inc	r24
 d30:	50 51       	subi	r21, 0x10	; 16
 d32:	b9 f7       	brne	.-18     	; 0xd22 <__utoa_common+0x6>
 d34:	a0 5d       	subi	r26, 0xD0	; 208
 d36:	aa 33       	cpi	r26, 0x3A	; 58
 d38:	08 f0       	brcs	.+2      	; 0xd3c <__utoa_common+0x20>
 d3a:	a9 5d       	subi	r26, 0xD9	; 217
 d3c:	a1 93       	st	Z+, r26
 d3e:	00 97       	sbiw	r24, 0x00	; 0
 d40:	79 f7       	brne	.-34     	; 0xd20 <__utoa_common+0x4>
 d42:	b1 11       	cpse	r27, r1
 d44:	b1 93       	st	Z+, r27
 d46:	11 92       	st	Z+, r1
 d48:	cb 01       	movw	r24, r22
 d4a:	00 c0       	rjmp	.+0      	; 0xd4c <strrev>

00000d4c <strrev>:
 d4c:	dc 01       	movw	r26, r24
 d4e:	fc 01       	movw	r30, r24
 d50:	67 2f       	mov	r22, r23
 d52:	71 91       	ld	r23, Z+
 d54:	77 23       	and	r23, r23
 d56:	e1 f7       	brne	.-8      	; 0xd50 <strrev+0x4>
 d58:	32 97       	sbiw	r30, 0x02	; 2
 d5a:	04 c0       	rjmp	.+8      	; 0xd64 <strrev+0x18>
 d5c:	7c 91       	ld	r23, X
 d5e:	6d 93       	st	X+, r22
 d60:	70 83       	st	Z, r23
 d62:	62 91       	ld	r22, -Z
 d64:	ae 17       	cp	r26, r30
 d66:	bf 07       	cpc	r27, r31
 d68:	c8 f3       	brcs	.-14     	; 0xd5c <strrev+0x10>
 d6a:	08 95       	ret

00000d6c <_exit>:
 d6c:	f8 94       	cli

00000d6e <__stop_program>:
 d6e:	ff cf       	rjmp	.-2      	; 0xd6e <__stop_program>
