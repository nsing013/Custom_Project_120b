
Custom_Projects_YAAAAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000a28  00000abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000215  00800144  00800144  00000b00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f3  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a13  00000000  00000000  00002023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000951  00000000  00000000  00002a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c3  00000000  00000000  000035ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000768  00000000  00000000  00003d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000044d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3c c1       	rjmp	.+632    	; 0x27a <__ctors_end>
   2:	00 00       	nop
   4:	57 c1       	rjmp	.+686    	; 0x2b4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c1       	rjmp	.+682    	; 0x2b4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c1       	rjmp	.+678    	; 0x2b4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c1       	rjmp	.+674    	; 0x2b4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c1       	rjmp	.+670    	; 0x2b4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c1       	rjmp	.+666    	; 0x2b4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c1       	rjmp	.+662    	; 0x2b4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c1       	rjmp	.+658    	; 0x2b4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c1       	rjmp	.+654    	; 0x2b4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c1       	rjmp	.+650    	; 0x2b4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c1       	rjmp	.+646    	; 0x2b4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c1       	rjmp	.+642    	; 0x2b4 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c1       	rjmp	.+812    	; 0x362 <__vector_13>
  36:	00 00       	nop
  38:	3d c1       	rjmp	.+634    	; 0x2b4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c1       	rjmp	.+630    	; 0x2b4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c1       	rjmp	.+626    	; 0x2b4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c1       	rjmp	.+622    	; 0x2b4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c1       	rjmp	.+618    	; 0x2b4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c1       	rjmp	.+614    	; 0x2b4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c1       	rjmp	.+610    	; 0x2b4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c1       	rjmp	.+606    	; 0x2b4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c1       	rjmp	.+602    	; 0x2b4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c1       	rjmp	.+598    	; 0x2b4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c1       	rjmp	.+594    	; 0x2b4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c1       	rjmp	.+590    	; 0x2b4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c1       	rjmp	.+586    	; 0x2b4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c1       	rjmp	.+582    	; 0x2b4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c1       	rjmp	.+578    	; 0x2b4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c1       	rjmp	.+574    	; 0x2b4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c1       	rjmp	.+570    	; 0x2b4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c1       	rjmp	.+566    	; 0x2b4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c1       	rjmp	.+562    	; 0x2b4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c1       	rjmp	.+558    	; 0x2b4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c1       	rjmp	.+554    	; 0x2b4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9c 03       	fmulsu	r17, r20
  8e:	c6 03       	fmuls	r20, r22
  90:	ff 03       	fmulsu	r23, r23
  92:	12 04       	cpc	r1, r2
  94:	25 04       	cpc	r2, r5
  96:	34 04       	cpc	r3, r4
  98:	43 04       	cpc	r4, r3

0000009a <CHARSET>:
  9a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  aa:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  ba:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  ca:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  da:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  ea:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  fa:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
 10a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 11a:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 12a:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 13a:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 14a:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 15a:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 16a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 17a:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 18a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 19a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 1aa:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1ba:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1ca:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1da:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1ea:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1fa:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 20a:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 21a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 22a:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 23a:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 24a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 25a:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 26a:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000027a <__ctors_end>:
 27a:	11 24       	eor	r1, r1
 27c:	1f be       	out	0x3f, r1	; 63
 27e:	cf ef       	ldi	r28, 0xFF	; 255
 280:	d0 e4       	ldi	r29, 0x40	; 64
 282:	de bf       	out	0x3e, r29	; 62
 284:	cd bf       	out	0x3d, r28	; 61

00000286 <__do_copy_data>:
 286:	11 e0       	ldi	r17, 0x01	; 1
 288:	a0 e0       	ldi	r26, 0x00	; 0
 28a:	b1 e0       	ldi	r27, 0x01	; 1
 28c:	e8 e2       	ldi	r30, 0x28	; 40
 28e:	fa e0       	ldi	r31, 0x0A	; 10
 290:	00 e0       	ldi	r16, 0x00	; 0
 292:	0b bf       	out	0x3b, r16	; 59
 294:	02 c0       	rjmp	.+4      	; 0x29a <__do_copy_data+0x14>
 296:	07 90       	elpm	r0, Z+
 298:	0d 92       	st	X+, r0
 29a:	a4 34       	cpi	r26, 0x44	; 68
 29c:	b1 07       	cpc	r27, r17
 29e:	d9 f7       	brne	.-10     	; 0x296 <__do_copy_data+0x10>

000002a0 <__do_clear_bss>:
 2a0:	23 e0       	ldi	r18, 0x03	; 3
 2a2:	a4 e4       	ldi	r26, 0x44	; 68
 2a4:	b1 e0       	ldi	r27, 0x01	; 1
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <.do_clear_bss_start>

000002a8 <.do_clear_bss_loop>:
 2a8:	1d 92       	st	X+, r1

000002aa <.do_clear_bss_start>:
 2aa:	a9 35       	cpi	r26, 0x59	; 89
 2ac:	b2 07       	cpc	r27, r18
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <.do_clear_bss_loop>
 2b0:	7e d3       	rcall	.+1788   	; 0x9ae <main>
 2b2:	b8 c3       	rjmp	.+1904   	; 0xa24 <_exit>

000002b4 <__bad_interrupt>:
 2b4:	a5 ce       	rjmp	.-694    	; 0x0 <__vectors>

000002b6 <write>:
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
	nokia_lcd.cursor_y = y;
 2b6:	28 98       	cbi	0x05, 0	; 5
 2b8:	66 23       	and	r22, r22
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <write+0xa>
 2bc:	2a 9a       	sbi	0x05, 2	; 5
 2be:	15 c0       	rjmp	.+42     	; 0x2ea <write+0x34>
 2c0:	2a 98       	cbi	0x05, 2	; 5
 2c2:	13 c0       	rjmp	.+38     	; 0x2ea <write+0x34>
 2c4:	ac 01       	movw	r20, r24
 2c6:	02 2e       	mov	r0, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <write+0x18>
 2ca:	55 95       	asr	r21
 2cc:	47 95       	ror	r20
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <write+0x14>
 2d2:	40 ff       	sbrs	r20, 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <write+0x24>
 2d6:	2b 9a       	sbi	0x05, 3	; 5
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <write+0x26>
 2da:	2b 98       	cbi	0x05, 3	; 5
 2dc:	2c 9a       	sbi	0x05, 4	; 5
 2de:	2c 98       	cbi	0x05, 4	; 5
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	31 09       	sbc	r19, r1
 2e4:	78 f7       	brcc	.-34     	; 0x2c4 <write+0xe>
 2e6:	28 9a       	sbi	0x05, 0	; 5
 2e8:	08 95       	ret
 2ea:	27 e0       	ldi	r18, 0x07	; 7
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	e9 cf       	rjmp	.-46     	; 0x2c4 <write+0xe>

000002f2 <write_cmd>:
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	e0 cf       	rjmp	.-64     	; 0x2b6 <write>
 2f6:	08 95       	ret

000002f8 <TimerSet>:
 2f8:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <_avr_timer_M>
 2fc:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <_avr_timer_M+0x1>
 300:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_M+0x2>
 304:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_M+0x3>
 308:	60 93 4b 03 	sts	0x034B, r22	; 0x80034b <_avr_timer_cntcurr>
 30c:	70 93 4c 03 	sts	0x034C, r23	; 0x80034c <_avr_timer_cntcurr+0x1>
 310:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <_avr_timer_cntcurr+0x2>
 314:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <_avr_timer_cntcurr+0x3>
 318:	08 95       	ret

0000031a <TimerOn>:
 31a:	8b e0       	ldi	r24, 0x0B	; 11
 31c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 320:	8d e7       	ldi	r24, 0x7D	; 125
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 328:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 332:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 336:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 33a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_avr_timer_M>
 33e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_avr_timer_M+0x1>
 342:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_avr_timer_M+0x2>
 346:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <_avr_timer_M+0x3>
 34a:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <_avr_timer_cntcurr>
 34e:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <_avr_timer_cntcurr+0x1>
 352:	a0 93 4d 03 	sts	0x034D, r26	; 0x80034d <_avr_timer_cntcurr+0x2>
 356:	b0 93 4e 03 	sts	0x034E, r27	; 0x80034e <_avr_timer_cntcurr+0x3>
 35a:	8f b7       	in	r24, 0x3f	; 63
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	8f bf       	out	0x3f, r24	; 63
 360:	08 95       	ret

00000362 <__vector_13>:
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <_avr_timer_cntcurr>
 378:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <_avr_timer_cntcurr+0x1>
 37c:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <_avr_timer_cntcurr+0x2>
 380:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <_avr_timer_cntcurr+0x3>
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	a1 09       	sbc	r26, r1
 388:	b1 09       	sbc	r27, r1
 38a:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <_avr_timer_cntcurr>
 38e:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <_avr_timer_cntcurr+0x1>
 392:	a0 93 4d 03 	sts	0x034D, r26	; 0x80034d <_avr_timer_cntcurr+0x2>
 396:	b0 93 4e 03 	sts	0x034E, r27	; 0x80034e <_avr_timer_cntcurr+0x3>
 39a:	89 2b       	or	r24, r25
 39c:	8a 2b       	or	r24, r26
 39e:	8b 2b       	or	r24, r27
 3a0:	99 f4       	brne	.+38     	; 0x3c8 <__vector_13+0x66>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <TimerFlag>
 3a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_avr_timer_M>
 3ac:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_avr_timer_M+0x1>
 3b0:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_avr_timer_M+0x2>
 3b4:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <_avr_timer_M+0x3>
 3b8:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <_avr_timer_cntcurr>
 3bc:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <_avr_timer_cntcurr+0x1>
 3c0:	a0 93 4d 03 	sts	0x034D, r26	; 0x80034d <_avr_timer_cntcurr+0x2>
 3c4:	b0 93 4e 03 	sts	0x034E, r27	; 0x80034e <_avr_timer_cntcurr+0x3>
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <nokia_lcd_init>:
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	20 9a       	sbi	0x04, 0	; 4
 3e0:	21 9a       	sbi	0x04, 1	; 4
 3e2:	22 9a       	sbi	0x04, 2	; 4
 3e4:	23 9a       	sbi	0x04, 3	; 4
 3e6:	24 9a       	sbi	0x04, 4	; 4
 3e8:	29 9a       	sbi	0x05, 1	; 5
 3ea:	28 9a       	sbi	0x05, 0	; 5
 3ec:	83 ec       	ldi	r24, 0xC3	; 195
 3ee:	99 e0       	ldi	r25, 0x09	; 9
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <nokia_lcd_init+0x16>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <nokia_lcd_init+0x1c>
 3f6:	00 00       	nop
 3f8:	29 98       	cbi	0x05, 1	; 5
 3fa:	8b e5       	ldi	r24, 0x5B	; 91
 3fc:	94 e4       	ldi	r25, 0x44	; 68
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <nokia_lcd_init+0x24>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	29 9a       	sbi	0x05, 1	; 5
 408:	28 98       	cbi	0x05, 0	; 5
 40a:	81 e2       	ldi	r24, 0x21	; 33
 40c:	72 df       	rcall	.-284    	; 0x2f2 <write_cmd>
 40e:	83 e1       	ldi	r24, 0x13	; 19
 410:	70 df       	rcall	.-288    	; 0x2f2 <write_cmd>
 412:	86 e0       	ldi	r24, 0x06	; 6
 414:	6e df       	rcall	.-292    	; 0x2f2 <write_cmd>
 416:	82 ec       	ldi	r24, 0xC2	; 194
 418:	6c df       	rcall	.-296    	; 0x2f2 <write_cmd>
 41a:	80 e2       	ldi	r24, 0x20	; 32
 41c:	6a df       	rcall	.-300    	; 0x2f2 <write_cmd>
 41e:	89 e0       	ldi	r24, 0x09	; 9
 420:	68 df       	rcall	.-304    	; 0x2f2 <write_cmd>
 422:	80 e8       	ldi	r24, 0x80	; 128
 424:	66 df       	rcall	.-308    	; 0x2f2 <write_cmd>
 426:	80 e4       	ldi	r24, 0x40	; 64
 428:	64 df       	rcall	.-312    	; 0x2f2 <write_cmd>
 42a:	c8 ef       	ldi	r28, 0xF8	; 248
 42c:	d1 e0       	ldi	r29, 0x01	; 1
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	41 df       	rcall	.-382    	; 0x2b6 <write>
 434:	21 97       	sbiw	r28, 0x01	; 1
 436:	d9 f7       	brne	.-10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 438:	88 e0       	ldi	r24, 0x08	; 8
 43a:	5b df       	rcall	.-330    	; 0x2f2 <write_cmd>
 43c:	8c e0       	ldi	r24, 0x0C	; 12
 43e:	59 df       	rcall	.-334    	; 0x2f2 <write_cmd>
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <nokia_lcd_clear>:
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	54 df       	rcall	.-344    	; 0x2f2 <write_cmd>
 44a:	80 e4       	ldi	r24, 0x40	; 64
 44c:	52 df       	rcall	.-348    	; 0x2f2 <write_cmd>
 44e:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <nokia_lcd+0x1f8>
 452:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <nokia_lcd+0x1f9>
 456:	e1 e5       	ldi	r30, 0x51	; 81
 458:	f1 e0       	ldi	r31, 0x01	; 1
 45a:	89 e4       	ldi	r24, 0x49	; 73
 45c:	93 e0       	ldi	r25, 0x03	; 3
 45e:	11 92       	st	Z+, r1
 460:	e8 17       	cp	r30, r24
 462:	f9 07       	cpc	r31, r25
 464:	e1 f7       	brne	.-8      	; 0x45e <nokia_lcd_clear+0x18>
 466:	08 95       	ret

00000468 <nokia_lcd_set_pixel>:
 468:	26 2f       	mov	r18, r22
 46a:	26 95       	lsr	r18
 46c:	26 95       	lsr	r18
 46e:	26 95       	lsr	r18
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	34 e5       	ldi	r19, 0x54	; 84
 474:	23 9f       	mul	r18, r19
 476:	80 0d       	add	r24, r0
 478:	91 1d       	adc	r25, r1
 47a:	11 24       	eor	r1, r1
 47c:	44 23       	and	r20, r20
 47e:	79 f0       	breq	.+30     	; 0x49e <nokia_lcd_set_pixel+0x36>
 480:	fc 01       	movw	r30, r24
 482:	ef 5a       	subi	r30, 0xAF	; 175
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	67 70       	andi	r22, 0x07	; 7
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <nokia_lcd_set_pixel+0x2a>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <nokia_lcd_set_pixel+0x26>
 496:	90 81       	ld	r25, Z
 498:	89 2b       	or	r24, r25
 49a:	80 83       	st	Z, r24
 49c:	08 95       	ret
 49e:	fc 01       	movw	r30, r24
 4a0:	ef 5a       	subi	r30, 0xAF	; 175
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	67 70       	andi	r22, 0x07	; 7
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <nokia_lcd_set_pixel+0x48>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <nokia_lcd_set_pixel+0x44>
 4b4:	80 95       	com	r24
 4b6:	90 81       	ld	r25, Z
 4b8:	89 23       	and	r24, r25
 4ba:	80 83       	st	Z, r24
 4bc:	08 95       	ret

000004be <nokia_lcd_write_char>:
 4be:	5f 92       	push	r5
 4c0:	6f 92       	push	r6
 4c2:	7f 92       	push	r7
 4c4:	8f 92       	push	r8
 4c6:	9f 92       	push	r9
 4c8:	af 92       	push	r10
 4ca:	bf 92       	push	r11
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	56 2e       	mov	r5, r22
 4de:	26 2f       	mov	r18, r22
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	49 01       	movw	r8, r18
 4e4:	88 0c       	add	r8, r8
 4e6:	99 1c       	adc	r9, r9
 4e8:	88 0c       	add	r8, r8
 4ea:	99 1c       	adc	r9, r9
 4ec:	82 0e       	add	r8, r18
 4ee:	93 1e       	adc	r9, r19
 4f0:	18 14       	cp	r1, r8
 4f2:	19 04       	cpc	r1, r9
 4f4:	0c f0       	brlt	.+2      	; 0x4f8 <nokia_lcd_write_char+0x3a>
 4f6:	59 c0       	rjmp	.+178    	; 0x5aa <nokia_lcd_write_char+0xec>
 4f8:	89 01       	movw	r16, r18
 4fa:	00 0f       	add	r16, r16
 4fc:	11 1f       	adc	r17, r17
 4fe:	00 0f       	add	r16, r16
 500:	11 1f       	adc	r17, r17
 502:	00 0f       	add	r16, r16
 504:	11 1f       	adc	r17, r17
 506:	02 1b       	sub	r16, r18
 508:	13 0b       	sbc	r17, r19
 50a:	61 2c       	mov	r6, r1
 50c:	a8 2e       	mov	r10, r24
 50e:	b1 2c       	mov	r11, r1
 510:	c5 01       	movw	r24, r10
 512:	80 97       	sbiw	r24, 0x20	; 32
 514:	5c 01       	movw	r10, r24
 516:	aa 0c       	add	r10, r10
 518:	bb 1c       	adc	r11, r11
 51a:	aa 0c       	add	r10, r10
 51c:	bb 1c       	adc	r11, r11
 51e:	a8 0e       	add	r10, r24
 520:	b9 1e       	adc	r11, r25
 522:	0f 2e       	mov	r0, r31
 524:	fa e4       	ldi	r31, 0x4A	; 74
 526:	cf 2e       	mov	r12, r31
 528:	f3 e0       	ldi	r31, 0x03	; 3
 52a:	df 2e       	mov	r13, r31
 52c:	f0 2d       	mov	r31, r0
 52e:	0f 2e       	mov	r0, r31
 530:	f9 e4       	ldi	r31, 0x49	; 73
 532:	ef 2e       	mov	r14, r31
 534:	f3 e0       	ldi	r31, 0x03	; 3
 536:	ff 2e       	mov	r15, r31
 538:	f0 2d       	mov	r31, r0
 53a:	2a c0       	rjmp	.+84     	; 0x590 <nokia_lcd_write_char+0xd2>
 53c:	fe 01       	movw	r30, r28
 53e:	24 91       	lpm	r18, Z
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	87 2d       	mov	r24, r7
 544:	65 2d       	mov	r22, r5
 546:	59 d2       	rcall	.+1202   	; 0x9fa <__udivmodqi4>
 548:	02 c0       	rjmp	.+4      	; 0x54e <nokia_lcd_write_char+0x90>
 54a:	35 95       	asr	r19
 54c:	27 95       	ror	r18
 54e:	8a 95       	dec	r24
 550:	e2 f7       	brpl	.-8      	; 0x54a <nokia_lcd_write_char+0x8c>
 552:	20 ff       	sbrs	r18, 0
 554:	09 c0       	rjmp	.+18     	; 0x568 <nokia_lcd_write_char+0xaa>
 556:	f6 01       	movw	r30, r12
 558:	60 81       	ld	r22, Z
 55a:	67 0d       	add	r22, r7
 55c:	f7 01       	movw	r30, r14
 55e:	80 81       	ld	r24, Z
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	86 0d       	add	r24, r6
 564:	81 df       	rcall	.-254    	; 0x468 <nokia_lcd_set_pixel>
 566:	08 c0       	rjmp	.+16     	; 0x578 <nokia_lcd_write_char+0xba>
 568:	f6 01       	movw	r30, r12
 56a:	60 81       	ld	r22, Z
 56c:	67 0d       	add	r22, r7
 56e:	f7 01       	movw	r30, r14
 570:	80 81       	ld	r24, Z
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	86 0d       	add	r24, r6
 576:	78 df       	rcall	.-272    	; 0x468 <nokia_lcd_set_pixel>
 578:	73 94       	inc	r7
 57a:	87 2d       	mov	r24, r7
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	80 17       	cp	r24, r16
 580:	91 07       	cpc	r25, r17
 582:	e4 f2       	brlt	.-72     	; 0x53c <nokia_lcd_write_char+0x7e>
 584:	63 94       	inc	r6
 586:	86 2d       	mov	r24, r6
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	88 15       	cp	r24, r8
 58c:	99 05       	cpc	r25, r9
 58e:	6c f4       	brge	.+26     	; 0x5aa <nokia_lcd_write_char+0xec>
 590:	10 16       	cp	r1, r16
 592:	11 06       	cpc	r1, r17
 594:	bc f7       	brge	.-18     	; 0x584 <nokia_lcd_write_char+0xc6>
 596:	86 2d       	mov	r24, r6
 598:	65 2d       	mov	r22, r5
 59a:	2f d2       	rcall	.+1118   	; 0x9fa <__udivmodqi4>
 59c:	e5 01       	movw	r28, r10
 59e:	c8 0f       	add	r28, r24
 5a0:	d1 1d       	adc	r29, r1
 5a2:	c6 56       	subi	r28, 0x66	; 102
 5a4:	df 4f       	sbci	r29, 0xFF	; 255
 5a6:	71 2c       	mov	r7, r1
 5a8:	c9 cf       	rjmp	.-110    	; 0x53c <nokia_lcd_write_char+0x7e>
 5aa:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <nokia_lcd+0x1f8>
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	98 0f       	add	r25, r24
 5b2:	85 2d       	mov	r24, r5
 5b4:	88 0f       	add	r24, r24
 5b6:	88 0f       	add	r24, r24
 5b8:	85 0d       	add	r24, r5
 5ba:	89 0f       	add	r24, r25
 5bc:	84 35       	cpi	r24, 0x54	; 84
 5be:	18 f4       	brcc	.+6      	; 0x5c6 <nokia_lcd_write_char+0x108>
 5c0:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <nokia_lcd+0x1f8>
 5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <nokia_lcd_write_char+0x124>
 5c6:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <nokia_lcd+0x1f8>
 5ca:	ea e4       	ldi	r30, 0x4A	; 74
 5cc:	f3 e0       	ldi	r31, 0x03	; 3
 5ce:	80 81       	ld	r24, Z
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	98 0f       	add	r25, r24
 5d4:	85 2d       	mov	r24, r5
 5d6:	88 0f       	add	r24, r24
 5d8:	88 0f       	add	r24, r24
 5da:	88 0f       	add	r24, r24
 5dc:	85 19       	sub	r24, r5
 5de:	89 0f       	add	r24, r25
 5e0:	80 83       	st	Z, r24
 5e2:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <nokia_lcd+0x1f9>
 5e6:	80 33       	cpi	r24, 0x30	; 48
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <nokia_lcd_write_char+0x134>
 5ea:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <nokia_lcd+0x1f8>
 5ee:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <nokia_lcd+0x1f9>
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	ef 90       	pop	r14
 5fe:	df 90       	pop	r13
 600:	cf 90       	pop	r12
 602:	bf 90       	pop	r11
 604:	af 90       	pop	r10
 606:	9f 90       	pop	r9
 608:	8f 90       	pop	r8
 60a:	7f 90       	pop	r7
 60c:	6f 90       	pop	r6
 60e:	5f 90       	pop	r5
 610:	08 95       	ret

00000612 <nokia_lcd_write_string>:
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	ec 01       	movw	r28, r24
 61a:	88 81       	ld	r24, Y
 61c:	88 23       	and	r24, r24
 61e:	39 f0       	breq	.+14     	; 0x62e <nokia_lcd_write_string+0x1c>
 620:	16 2f       	mov	r17, r22
 622:	21 96       	adiw	r28, 0x01	; 1
 624:	61 2f       	mov	r22, r17
 626:	4b df       	rcall	.-362    	; 0x4be <nokia_lcd_write_char>
 628:	89 91       	ld	r24, Y+
 62a:	81 11       	cpse	r24, r1
 62c:	fb cf       	rjmp	.-10     	; 0x624 <nokia_lcd_write_string+0x12>
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	08 95       	ret

00000636 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 63e:	80 e8       	ldi	r24, 0x80	; 128
 640:	58 de       	rcall	.-848    	; 0x2f2 <write_cmd>
	write_cmd(0x40);
 642:	80 e4       	ldi	r24, 0x40	; 64
 644:	56 de       	rcall	.-852    	; 0x2f2 <write_cmd>
 646:	c1 e5       	ldi	r28, 0x51	; 81
 648:	d1 e0       	ldi	r29, 0x01	; 1
 64a:	09 e4       	ldi	r16, 0x49	; 73
 64c:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	89 91       	ld	r24, Y+
 652:	31 de       	rcall	.-926    	; 0x2b6 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 654:	c0 17       	cp	r28, r16
 656:	d1 07       	cpc	r29, r17
 658:	d1 f7       	brne	.-12     	; 0x64e <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	08 95       	ret

00000664 <nokia_LCD_tick>:
int score = 0;
short button;

enum Nokia_LCD_States {Nokia_LCD_Start, Nokia_LCD_wait_before_level, Nokia_LCD_levels, Nokia_LCD_Continue} Nokia_LCD_State;
void nokia_LCD_tick() 
{													
 664:	0f 93       	push	r16
 666:	1f 93       	push	r17
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
	button = ~PINB & 0x20;											//checking for button press to move on to levels button press 
 66c:	83 b1       	in	r24, 0x03	; 3
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	80 95       	com	r24
 672:	90 95       	com	r25
 674:	80 72       	andi	r24, 0x20	; 32
 676:	99 27       	eor	r25, r25
 678:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <button+0x1>
 67c:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <button>
	switch(Nokia_LCD_State)	//transitions
 680:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <Nokia_LCD_State>
 684:	21 30       	cpi	r18, 0x01	; 1
 686:	19 f1       	breq	.+70     	; 0x6ce <nokia_LCD_tick+0x6a>
 688:	30 f0       	brcs	.+12     	; 0x696 <nokia_LCD_tick+0x32>
 68a:	22 30       	cpi	r18, 0x02	; 2
 68c:	39 f1       	breq	.+78     	; 0x6dc <nokia_LCD_tick+0x78>
 68e:	23 30       	cpi	r18, 0x03	; 3
 690:	09 f4       	brne	.+2      	; 0x694 <nokia_LCD_tick+0x30>
 692:	41 c0       	rjmp	.+130    	; 0x716 <nokia_LCD_tick+0xb2>
 694:	3e c0       	rjmp	.+124    	; 0x712 <nokia_LCD_tick+0xae>
	{	
		case Nokia_LCD_Start:										//starting stuff
			nokia_lcd_init();
 696:	a1 de       	rcall	.-702    	; 0x3da <nokia_lcd_init>
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 698:	80 e2       	ldi	r24, 0x20	; 32
 69a:	2b de       	rcall	.-938    	; 0x2f2 <write_cmd>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 69c:	09 e4       	ldi	r16, 0x49	; 73
 69e:	13 e0       	ldi	r17, 0x03	; 3
 6a0:	f8 01       	movw	r30, r16
 6a2:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 6a4:	ca e4       	ldi	r28, 0x4A	; 74
 6a6:	d3 e0       	ldi	r29, 0x03	; 3
 6a8:	18 82       	st	Y, r1
			nokia_lcd_power(1);
			nokia_lcd_set_cursor(0, 0);
			nokia_lcd_write_string("MEMORY", 2);
 6aa:	62 e0       	ldi	r22, 0x02	; 2
 6ac:	82 e1       	ldi	r24, 0x12	; 18
 6ae:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_render();
 6b0:	b0 df       	rcall	.-160    	; 0x612 <nokia_lcd_write_string>
 6b2:	c1 df       	rcall	.-126    	; 0x636 <nokia_lcd_render>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 6b4:	f8 01       	movw	r30, r16
 6b6:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
 6b8:	82 e1       	ldi	r24, 0x12	; 18
			nokia_lcd_set_cursor(0, 18);
			nokia_lcd_write_string("Press button to continue.", 1);	//want this to display until user gives input
 6ba:	88 83       	st	Y, r24
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	89 e1       	ldi	r24, 0x19	; 25
 6c0:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_render();
 6c2:	a7 df       	rcall	.-178    	; 0x612 <nokia_lcd_write_string>
 6c4:	b8 df       	rcall	.-144    	; 0x636 <nokia_lcd_render>
			Nokia_LCD_State = Nokia_LCD_wait_before_level;						//go to the wait state and wait for input from button
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <Nokia_LCD_State>
			break;
		
		case Nokia_LCD_wait_before_level:
			if(button)	//in the wait state if the user presses the joystick continue to level 1
 6cc:	24 c0       	rjmp	.+72     	; 0x716 <nokia_LCD_tick+0xb2>
 6ce:	89 2b       	or	r24, r25
			{
				nokia_lcd_clear();	//clear the screen
 6d0:	11 f1       	breq	.+68     	; 0x716 <nokia_LCD_tick+0xb2>
 6d2:	b9 de       	rcall	.-654    	; 0x446 <nokia_lcd_clear>
				Nokia_LCD_State = Nokia_LCD_levels;
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <Nokia_LCD_State>
 6da:	1d c0       	rjmp	.+58     	; 0x716 <nokia_LCD_tick+0xb2>
				Nokia_LCD_State =  Nokia_LCD_wait_before_level; //loop in wait state until user presses something
			}
			break;

		case Nokia_LCD_levels:
			level++;			//want level to be 1 the first time and increment every time it comes to level state
 6dc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <level>
 6e0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <level+0x1>
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <level+0x1>
 6ea:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <level>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 6ee:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
 6f2:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <nokia_lcd+0x1f9>
			nokia_lcd_set_cursor(0, 0);
			nokia_lcd_write_string("Level: ", 1); //display the level number!!! HELP
 6f6:	61 e0       	ldi	r22, 0x01	; 1
 6f8:	83 e3       	ldi	r24, 0x33	; 51
			nokia_lcd_render();
 6fa:	91 e0       	ldi	r25, 0x01	; 1
 6fc:	8a df       	rcall	.-236    	; 0x612 <nokia_lcd_write_string>
			nokia_lcd_write_string("Score: ", 1); //display the score!!! HELP
 6fe:	9b df       	rcall	.-202    	; 0x636 <nokia_lcd_render>
 700:	61 e0       	ldi	r22, 0x01	; 1
 702:	8b e3       	ldi	r24, 0x3B	; 59
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	85 df       	rcall	.-246    	; 0x612 <nokia_lcd_write_string>
			nokia_lcd_render();
 708:	96 df       	rcall	.-212    	; 0x636 <nokia_lcd_render>
 70a:	83 e0       	ldi	r24, 0x03	; 3
			//display the level image on the matrix for 10 seconds! HELP!
			
			//each level has a different picture which will display on the LED Matrix. 
			// so depending on the level send output to the matrix state machine.
			Nokia_LCD_State =  Nokia_LCD_Continue;
 70c:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <Nokia_LCD_State>
 710:	02 c0       	rjmp	.+4      	; 0x716 <nokia_LCD_tick+0xb2>
			break;
 712:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <Nokia_LCD_State>
		case Nokia_LCD_Continue:
			break;
		default:
			Nokia_LCD_State = Nokia_LCD_Start;
 716:	df 91       	pop	r29
		default:
			break;
	}
	
	//PORTC = output;
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <LED_Matrix_Tick>:
 720:	88 30       	cpi	r24, 0x08	; 8
int i = 0;

enum LED_Matrix_States {LED_Matrix_Start, LED_Matrix_levels, LED_Matrix_cursor, LED_Matrix_move_right, LED_Matrix_move_left, LED_Matrix_move_up, LED_Matrix_move_down, LED_Matrix_update_user_matrix};
int LED_Matrix_Tick(int state)
{
	switch (state)							//Transitions
 722:	91 05       	cpc	r25, r1
 724:	48 f4       	brcc	.+18     	; 0x738 <LED_Matrix_Tick+0x18>
		default:
			state = LED_Matrix_levels;
			break;
	}
	
	switch (state)							//Actions
 726:	fc 01       	movw	r30, r24
 728:	31 97       	sbiw	r30, 0x01	; 1
 72a:	e7 30       	cpi	r30, 0x07	; 7
 72c:	f1 05       	cpc	r31, r1
 72e:	08 f0       	brcs	.+2      	; 0x732 <LED_Matrix_Tick+0x12>
 730:	c1 c0       	rjmp	.+386    	; 0x8b4 <LED_Matrix_Tick+0x194>
 732:	ea 5b       	subi	r30, 0xBA	; 186
 734:	ff 4f       	sbci	r31, 0xFF	; 255
 736:	6d c1       	rjmp	.+730    	; 0xa12 <__tablejump2__>
	{
		case LED_Matrix_Start:
			break;
			
		case LED_Matrix_levels:				//don't screw with this
			PORTC = 0xFF;					//resets PORTC every time so last row does not mess with output for new row
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	88 b9       	out	0x08, r24	; 8
			PORTD = 0x01 << i;				//increments to next row, shifting will send power to the next row with every loop
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <__data_end>
 744:	02 c0       	rjmp	.+4      	; 0x74a <LED_Matrix_Tick+0x2a>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	0a 94       	dec	r0
 74c:	e2 f7       	brpl	.-8      	; 0x746 <LED_Matrix_Tick+0x26>
 74e:	8b b9       	out	0x0b, r24	; 11
			PORTC = y5[i];					//lights up the pattern for the given row
 750:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end>
 754:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__data_end+0x1>
 758:	ea 5f       	subi	r30, 0xFA	; 250
 75a:	fe 4f       	sbci	r31, 0xFE	; 254
 75c:	80 81       	ld	r24, Z
 75e:	88 b9       	out	0x08, r24	; 8
			i++;
 760:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 764:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 768:	01 96       	adiw	r24, 0x01	; 1
			if(i==8) {i = 0;}				//if at the end of row, restart at the start of next row
 76a:	88 30       	cpi	r24, 0x08	; 8
 76c:	91 05       	cpc	r25, r1
 76e:	39 f0       	breq	.+14     	; 0x77e <LED_Matrix_Tick+0x5e>
			
		case LED_Matrix_levels:				//don't screw with this
			PORTC = 0xFF;					//resets PORTC every time so last row does not mess with output for new row
			PORTD = 0x01 << i;				//increments to next row, shifting will send power to the next row with every loop
			PORTC = y5[i];					//lights up the pattern for the given row
			i++;
 770:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
 774:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	08 95       	ret
			if(i==8) {i = 0;}				//if at the end of row, restart at the start of next row
 77e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
 782:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	08 95       	ret
			break;
			
		case LED_Matrix_cursor:
			PORTC = 0xFF;								//Reset PortC every time so last row does not mess with output for new row
 78c:	2f ef       	ldi	r18, 0xFF	; 255
 78e:	28 b9       	out	0x08, r18	; 8
			PORTD = (0x01 << i);	
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <__data_end>
 798:	02 c0       	rjmp	.+4      	; 0x79e <LED_Matrix_Tick+0x7e>
 79a:	22 0f       	add	r18, r18
 79c:	33 1f       	adc	r19, r19
 79e:	0a 94       	dec	r0
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <LED_Matrix_Tick+0x7a>
 7a2:	2b b9       	out	0x0b, r18	; 11
			if(i == row){								//if the cursor is in the current row
 7a4:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <row>
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <__data_end>
 7ae:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <__data_end+0x1>
 7b2:	24 17       	cp	r18, r20
 7b4:	35 07       	cpc	r19, r21
 7b6:	51 f4       	brne	.+20     	; 0x7cc <LED_Matrix_Tick+0xac>
				PORTC = ~(user_input [i] | cursor_x);	//want to show the cursor with the user input, negated because we want to make a circuit
 7b8:	f9 01       	movw	r30, r18
 7ba:	e9 5b       	subi	r30, 0xB9	; 185
 7bc:	fe 4f       	sbci	r31, 0xFE	; 254
 7be:	30 81       	ld	r19, Z
 7c0:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <cursor_x>
 7c4:	23 2b       	or	r18, r19
 7c6:	20 95       	com	r18
 7c8:	28 b9       	out	0x08, r18	; 8
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <LED_Matrix_Tick+0xb8>
			}
			else{
				PORTC = ~(user_input [i]);				//or else just show the pattern for that row
 7cc:	fa 01       	movw	r30, r20
 7ce:	e9 5b       	subi	r30, 0xB9	; 185
 7d0:	fe 4f       	sbci	r31, 0xFE	; 254
 7d2:	20 81       	ld	r18, Z
 7d4:	20 95       	com	r18
 7d6:	28 b9       	out	0x08, r18	; 8
			}	
			i++;
 7d8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__data_end>
 7dc:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__data_end+0x1>
 7e0:	2f 5f       	subi	r18, 0xFF	; 255
 7e2:	3f 4f       	sbci	r19, 0xFF	; 255
			if(i==8) {i = 0;}
 7e4:	28 30       	cpi	r18, 0x08	; 8
 7e6:	31 05       	cpc	r19, r1
 7e8:	29 f0       	breq	.+10     	; 0x7f4 <LED_Matrix_Tick+0xd4>
				PORTC = ~(user_input [i] | cursor_x);	//want to show the cursor with the user input, negated because we want to make a circuit
			}
			else{
				PORTC = ~(user_input [i]);				//or else just show the pattern for that row
			}	
			i++;
 7ea:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__data_end+0x1>
 7ee:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__data_end>
 7f2:	08 95       	ret
			if(i==8) {i = 0;}
 7f4:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
 7f8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
 7fc:	08 95       	ret
			break;
			
		case LED_Matrix_move_right:		
			if(col == 7)					//if at the right boundary
 7fe:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <col>
 802:	27 30       	cpi	r18, 0x07	; 7
 804:	09 f4       	brne	.+2      	; 0x808 <LED_Matrix_Tick+0xe8>
 806:	56 c0       	rjmp	.+172    	; 0x8b4 <LED_Matrix_Tick+0x194>
				break;						//do nothing
			col++;							
 808:	2f 5f       	subi	r18, 0xFF	; 255
 80a:	20 93 57 03 	sts	0x0357, r18	; 0x800357 <col>
			cursor_x = (0x80 >> col);		//Shift the led at the very left by col (which is incremented every time LED_Matrix_move_right is called) So it will start from the 8th bit every time and shift backward.
 80e:	40 e8       	ldi	r20, 0x80	; 128
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	ba 01       	movw	r22, r20
 814:	02 c0       	rjmp	.+4      	; 0x81a <LED_Matrix_Tick+0xfa>
 816:	75 95       	asr	r23
 818:	67 95       	ror	r22
 81a:	2a 95       	dec	r18
 81c:	e2 f7       	brpl	.-8      	; 0x816 <LED_Matrix_Tick+0xf6>
 81e:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <cursor_x>
			break;
 822:	08 95       	ret
			
		case LED_Matrix_move_left:
			if(col == 0)					//if at the right boundary
 824:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <col>
 828:	22 23       	and	r18, r18
 82a:	09 f4       	brne	.+2      	; 0x82e <LED_Matrix_Tick+0x10e>
 82c:	43 c0       	rjmp	.+134    	; 0x8b4 <LED_Matrix_Tick+0x194>
				break;						//do nothing
			col--;
 82e:	21 50       	subi	r18, 0x01	; 1
 830:	20 93 57 03 	sts	0x0357, r18	; 0x800357 <col>
			cursor_x = (0x80 >> col);		//still shifting right, but col is decremented every time LED_Matrix_move_left is called so we are shifting by less
 834:	40 e8       	ldi	r20, 0x80	; 128
 836:	50 e0       	ldi	r21, 0x00	; 0
 838:	ba 01       	movw	r22, r20
 83a:	02 c0       	rjmp	.+4      	; 0x840 <LED_Matrix_Tick+0x120>
 83c:	75 95       	asr	r23
 83e:	67 95       	ror	r22
 840:	2a 95       	dec	r18
 842:	e2 f7       	brpl	.-8      	; 0x83c <LED_Matrix_Tick+0x11c>
 844:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <cursor_x>
			break;
 848:	08 95       	ret
			
		case LED_Matrix_move_up:
			if(row == 0)					//if at the top boundary
 84a:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <row>
 84e:	22 23       	and	r18, r18
 850:	89 f1       	breq	.+98     	; 0x8b4 <LED_Matrix_Tick+0x194>
				break;						//do nothing
			row--;
 852:	21 50       	subi	r18, 0x01	; 1
 854:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <row>
			cursor_y = (0x01 << row);		//similar to x axis, shifting left because the 8 bits represent the row #, shifting left means moving down the rows
 858:	31 e0       	ldi	r19, 0x01	; 1
 85a:	01 c0       	rjmp	.+2      	; 0x85e <LED_Matrix_Tick+0x13e>
 85c:	33 0f       	add	r19, r19
 85e:	2a 95       	dec	r18
 860:	ea f7       	brpl	.-6      	; 0x85c <LED_Matrix_Tick+0x13c>
 862:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <cursor_y>
			break;
 866:	08 95       	ret
			
		case LED_Matrix_move_down:
			if(row == 7)
 868:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <row>
 86c:	27 30       	cpi	r18, 0x07	; 7
 86e:	11 f1       	breq	.+68     	; 0x8b4 <LED_Matrix_Tick+0x194>
				break;
			row++;
 870:	2f 5f       	subi	r18, 0xFF	; 255
 872:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <row>
			cursor_y = (0x01 << row);
 876:	31 e0       	ldi	r19, 0x01	; 1
 878:	01 c0       	rjmp	.+2      	; 0x87c <LED_Matrix_Tick+0x15c>
 87a:	33 0f       	add	r19, r19
 87c:	2a 95       	dec	r18
 87e:	ea f7       	brpl	.-6      	; 0x87a <LED_Matrix_Tick+0x15a>
 880:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <cursor_y>
			break;
 884:	08 95       	ret
			
		case LED_Matrix_update_user_matrix:	
			user_input[row] |= cursor_x;	//updates user_input array with the current cursor value
 886:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <row>
 88a:	e4 2f       	mov	r30, r20
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	e9 5b       	subi	r30, 0xB9	; 185
 890:	fe 4f       	sbci	r31, 0xFE	; 254
 892:	30 81       	ld	r19, Z
 894:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <cursor_x>
 898:	23 2b       	or	r18, r19
 89a:	20 83       	st	Z, r18
			user_row_val |= 0x01 << row;	//giving power to all the rows
 89c:	21 e0       	ldi	r18, 0x01	; 1
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <LED_Matrix_Tick+0x186>
 8a2:	22 0f       	add	r18, r18
 8a4:	33 1f       	adc	r19, r19
 8a6:	4a 95       	dec	r20
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <LED_Matrix_Tick+0x182>
 8aa:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <user_row_val>
 8ae:	23 2b       	or	r18, r19
 8b0:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <user_row_val>
			
		default:
			break;
	}
	return state;
};
 8b4:	08 95       	ret

000008b6 <ADC_init>:

// Using ADC to get the x and y axis of the JOYSTICK
void ADC_init() 
{
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 8b6:	ea e7       	ldi	r30, 0x7A	; 122
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	80 6e       	ori	r24, 0xE0	; 224
 8be:	80 83       	st	Z, r24
 8c0:	08 95       	ret

000008c2 <Read_ADC>:
	// ADATE: setting this bit enables auto-triggering. Since we are in Free Running Mode, a new conversion will trigger whenever the previous conversion completes.
}

unsigned short Read_ADC(uint8_t ch)
{
	ADMUX = (1<<REFS0);
 8c2:	ac e7       	ldi	r26, 0x7C	; 124
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	90 e4       	ldi	r25, 0x40	; 64
 8c8:	9c 93       	st	X, r25
	ADCSRA |= (1 << ADEN) | (1 << ADPS2);
 8ca:	ea e7       	ldi	r30, 0x7A	; 122
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	90 81       	ld	r25, Z
 8d0:	94 68       	ori	r25, 0x84	; 132
 8d2:	90 83       	st	Z, r25
	ch = ch&0x07;
	ADMUX |= ch; //alternates between A0 and A1 which are the horizontal and vertical values on the joystick
 8d4:	9c 91       	ld	r25, X
 8d6:	87 70       	andi	r24, 0x07	; 7
 8d8:	98 2b       	or	r25, r24
 8da:	9c 93       	st	X, r25
	ADCSRA |= (1<<ADSC);
 8dc:	80 81       	ld	r24, Z
 8de:	80 64       	ori	r24, 0x40	; 64
 8e0:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
 8e2:	80 81       	ld	r24, Z
 8e4:	84 ff       	sbrs	r24, 4
 8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <Read_ADC+0x20>
	ADCSRA |= (1<<ADIF);
 8e8:	ea e7       	ldi	r30, 0x7A	; 122
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	80 61       	ori	r24, 0x10	; 16
 8f0:	80 83       	st	Z, r24
	return ADC;
 8f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 8f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 8fa:	08 95       	ret

000008fc <Joystick_tick>:
unsigned short high_threshold = 580;	//820;

enum Joystick_States {Joystick_navigate};

void Joystick_tick(int state) 
{
 8fc:	0f 93       	push	r16
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	8c 01       	movw	r16, r24
	short button = ~PINB & 0x20;							//button press also part of the joystick
 904:	c3 b1       	in	r28, 0x03	; 3
	valueX = Read_ADC(1);									//getting x and y axis from joystick
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	dc df       	rcall	.-72     	; 0x8c2 <Read_ADC>
 90a:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <valueX+0x1>
 90e:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <valueX>
	valueY = Read_ADC(0);
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	d6 df       	rcall	.-84     	; 0x8c2 <Read_ADC>
 916:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <valueY+0x1>
 91a:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <valueY>
	
	switch(state) //start transitions
 91e:	01 2b       	or	r16, r17
 920:	09 f0       	breq	.+2      	; 0x924 <Joystick_tick+0x28>
 922:	41 c0       	rjmp	.+130    	; 0x9a6 <Joystick_tick+0xaa>
	{
		case Joystick_navigate:
			if(valueX < low_threshold)	{					//joystick is in the left position
 924:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <valueX>
 928:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <valueX+0x1>
 92c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <low_threshold>
 930:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <low_threshold+0x1>
 934:	28 17       	cp	r18, r24
 936:	39 07       	cpc	r19, r25
 938:	18 f4       	brcc	.+6      	; 0x940 <Joystick_tick+0x44>
				LED_Matrix_Tick(LED_Matrix_move_left);		//decrement x value on cursor
 93a:	84 e0       	ldi	r24, 0x04	; 4
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	f0 de       	rcall	.-544    	; 0x720 <LED_Matrix_Tick>
			}
			if(valueX > high_threshold)	{					//joystick is in the right position
 940:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <valueX>
 944:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <valueX+0x1>
 948:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 94c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 950:	82 17       	cp	r24, r18
 952:	93 07       	cpc	r25, r19
				LED_Matrix_Tick(LED_Matrix_move_right);		//increment x value on cursor
 954:	18 f4       	brcc	.+6      	; 0x95c <Joystick_tick+0x60>
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	e2 de       	rcall	.-572    	; 0x720 <LED_Matrix_Tick>
			}
			if(valueY < low_threshold)	{					//joystick is in the left position
 95c:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <valueY>
 960:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <valueY+0x1>
 964:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <low_threshold>
 968:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <low_threshold+0x1>
 96c:	28 17       	cp	r18, r24
 96e:	39 07       	cpc	r19, r25
				LED_Matrix_Tick(LED_Matrix_move_up);		//increment x value on cursor, my joystick is sideways on the board so it has to be done this way
 970:	18 f4       	brcc	.+6      	; 0x978 <Joystick_tick+0x7c>
 972:	85 e0       	ldi	r24, 0x05	; 5
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	d4 de       	rcall	.-600    	; 0x720 <LED_Matrix_Tick>
			}
			if(valueY > high_threshold)	{					//joystick is in the right position
 978:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <valueY>
 97c:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <valueY+0x1>
 980:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 984:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 988:	82 17       	cp	r24, r18
 98a:	93 07       	cpc	r25, r19
				LED_Matrix_Tick(LED_Matrix_move_down);		//decrement x value on cursor
 98c:	18 f4       	brcc	.+6      	; 0x994 <Joystick_tick+0x98>
 98e:	86 e0       	ldi	r24, 0x06	; 6
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	c6 de       	rcall	.-628    	; 0x720 <LED_Matrix_Tick>
			}
			
			if(button)										// USE A BUTTON INSTEAD THERE IS NO BUTTON ON JOYSTICK DUMBB!
 994:	8c 2f       	mov	r24, r28
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	80 95       	com	r24
 99a:	90 95       	com	r25
 99c:	85 ff       	sbrs	r24, 5
				nokia_lcd_power(1);
				nokia_lcd_set_cursor(0, 0);
				nokia_lcd_write_string("Button is pressed!", 1);
				nokia_lcd_render();
				*/
				LED_Matrix_Tick(LED_Matrix_update_user_matrix); //update the user-input matrix 
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <Joystick_tick+0xaa>
 9a0:	87 e0       	ldi	r24, 0x07	; 7
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	bd de       	rcall	.-646    	; 0x720 <LED_Matrix_Tick>
			break;
		default:
			break;
	}
	return state;
 9a6:	cf 91       	pop	r28
 9a8:	1f 91       	pop	r17
 9aa:	0f 91       	pop	r16
 9ac:	08 95       	ret

000009ae <main>:
{

	//PA[0] connected to potentiometer giving input //LEFT and RIGHT for joystick right now
	//PA[1] want to connect to  y axis
	
	DDRA = 0x00; PORTA = 0xFF; //input from joystick
 9ae:	11 b8       	out	0x01, r1	; 1
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x1F; PORTB = 0xE0; //output to the LCD //one input from button
 9b4:	9f e1       	ldi	r25, 0x1F	; 31
 9b6:	94 b9       	out	0x04, r25	; 4
 9b8:	90 ee       	ldi	r25, 0xE0	; 224
 9ba:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0x00; //Pattern on each row of LED Matrix
 9bc:	87 b9       	out	0x07, r24	; 7
 9be:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Row # 
 9c0:	8a b9       	out	0x0a, r24	; 10
 9c2:	1b b8       	out	0x0b, r1	; 11

	ADC_init();
 9c4:	78 df       	rcall	.-272    	; 0x8b6 <ADC_init>
	char snum[10]; //Char array holds ADC Value to display on LCD
	
	TimerSet(10); //30);
 9c6:	6a e0       	ldi	r22, 0x0A	; 10
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();	
 9ce:	94 dc       	rcall	.-1752   	; 0x2f8 <TimerSet>
	
	while(1)
	{
		//LED_Matrix_Tick(LED_Matrix_levels);
		nokia_LCD_tick(Nokia_LCD_Start);
 9d0:	a4 dc       	rcall	.-1720   	; 0x31a <TimerOn>
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	46 de       	rcall	.-884    	; 0x664 <nokia_LCD_tick>
		while(!TimerFlag)
 9d8:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <TimerFlag>
 9dc:	81 11       	cpse	r24, r1
			LED_Matrix_Tick(LED_Matrix_cursor);				//LED MATRIX STATE MACHINE
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <main+0x40>
 9e0:	82 e0       	ldi	r24, 0x02	; 2
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	9d de       	rcall	.-710    	; 0x720 <LED_Matrix_Tick>
	
	while(1)
	{
		//LED_Matrix_Tick(LED_Matrix_levels);
		nokia_LCD_tick(Nokia_LCD_Start);
		while(!TimerFlag)
 9e6:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <TimerFlag>
 9ea:	88 23       	and	r24, r24
			LED_Matrix_Tick(LED_Matrix_cursor);				//LED MATRIX STATE MACHINE
			
		Joystick_tick(Joystick_navigate);
 9ec:	c9 f3       	breq	.-14     	; 0x9e0 <main+0x32>
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	84 df       	rcall	.-248    	; 0x8fc <Joystick_tick>
		TimerFlag = 0;	
 9f4:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <TimerFlag>
	}
 9f8:	ec cf       	rjmp	.-40     	; 0x9d2 <main+0x24>

000009fa <__udivmodqi4>:
 9fa:	99 1b       	sub	r25, r25
 9fc:	79 e0       	ldi	r23, 0x09	; 9
 9fe:	04 c0       	rjmp	.+8      	; 0xa08 <__udivmodqi4_ep>

00000a00 <__udivmodqi4_loop>:
 a00:	99 1f       	adc	r25, r25
 a02:	96 17       	cp	r25, r22
 a04:	08 f0       	brcs	.+2      	; 0xa08 <__udivmodqi4_ep>
 a06:	96 1b       	sub	r25, r22

00000a08 <__udivmodqi4_ep>:
 a08:	88 1f       	adc	r24, r24
 a0a:	7a 95       	dec	r23
 a0c:	c9 f7       	brne	.-14     	; 0xa00 <__udivmodqi4_loop>
 a0e:	80 95       	com	r24
 a10:	08 95       	ret

00000a12 <__tablejump2__>:
 a12:	ee 0f       	add	r30, r30
 a14:	ff 1f       	adc	r31, r31
 a16:	00 24       	eor	r0, r0
 a18:	00 1c       	adc	r0, r0
 a1a:	0b be       	out	0x3b, r0	; 59
 a1c:	07 90       	elpm	r0, Z+
 a1e:	f6 91       	elpm	r31, Z
 a20:	e0 2d       	mov	r30, r0
 a22:	09 94       	ijmp

00000a24 <_exit>:
 a24:	f8 94       	cli

00000a26 <__stop_program>:
 a26:	ff cf       	rjmp	.-2      	; 0xa26 <__stop_program>
